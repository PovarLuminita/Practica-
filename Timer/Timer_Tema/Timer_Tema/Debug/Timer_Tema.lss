
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ff  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bd  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_data>:
void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
}

void pinReset(volatile uint8_t *port, uint8_t pin){
	*port &=  ~(1 << pin);
  90:	82 e3       	ldi	r24, 0x32	; 50
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <contor_led_1+0x1>
  98:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contor_led_1>
  9c:	84 e6       	ldi	r24, 0x64	; 100
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <contor_led_2+0x1>
  a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contor_led_2>
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	08 95       	ret

000000b6 <port_init>:
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	15 b8       	out	0x05, r1	; 5
  bc:	9f e7       	ldi	r25, 0x7F	; 127
  be:	97 b9       	out	0x07, r25	; 7
  c0:	18 b8       	out	0x08, r1	; 8
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	1b b8       	out	0x0b, r1	; 11
  c6:	08 95       	ret

000000c8 <timer0_init>:
  c8:	84 b5       	in	r24, 0x24	; 36
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	84 bd       	out	0x24, r24	; 36
  ce:	85 b5       	in	r24, 0x25	; 37
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	85 bd       	out	0x25, r24	; 37
  d4:	89 ef       	ldi	r24, 0xF9	; 249
  d6:	87 bd       	out	0x27, r24	; 39
  d8:	ee e6       	ldi	r30, 0x6E	; 110
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <init_devices>:
  e4:	f8 94       	cli
  e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <port_init>
  ea:	0e 94 64 00 	call	0xc8	; 0xc8 <timer0_init>
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <pinToggle>:
  f2:	fc 01       	movw	r30, r24
  f4:	40 81       	ld	r20, Z
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <pinToggle+0xe>
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <pinToggle+0xa>
 104:	24 27       	eor	r18, r20
 106:	20 83       	st	Z, r18
 108:	08 95       	ret

0000010a <__vector_14>:
}


//The ISR for the 100Hz timer. This interrupt is generated every 10ms
ISR(TIMER0_COMPA_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	contor_led_1--;
 120:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <contor_led_1>
 124:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <contor_led_1+0x1>
 128:	41 50       	subi	r20, 0x01	; 1
 12a:	51 09       	sbc	r21, r1
 12c:	50 93 08 01 	sts	0x0108, r21	; 0x800108 <contor_led_1+0x1>
 130:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <contor_led_1>
	contor_led_2--;
 134:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <contor_led_2>
 138:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <contor_led_2+0x1>
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	31 09       	sbc	r19, r1
 140:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <contor_led_2+0x1>
 144:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <contor_led_2>
	contor_led_3--;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(contor_led_1 == 0){
 15a:	45 2b       	or	r20, r21
 15c:	49 f4       	brne	.+18     	; 0x170 <__vector_14+0x66>
		flag1 = 1;
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <flag1>
		contor_led_1 = timp_led_1;
 164:	42 e3       	ldi	r20, 0x32	; 50
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	50 93 08 01 	sts	0x0108, r21	; 0x800108 <contor_led_1+0x1>
 16c:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <contor_led_1>
	}

	if(contor_led_2 == 0){
 170:	23 2b       	or	r18, r19
 172:	49 f4       	brne	.+18     	; 0x186 <__vector_14+0x7c>
		flag2 = 1;
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <flag2>
		contor_led_2 =  timp_led_2;
 17a:	24 e6       	ldi	r18, 0x64	; 100
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <contor_led_2+0x1>
 182:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <contor_led_2>
	}
	
	if(contor_led_3 == 0){
 186:	89 2b       	or	r24, r25
 188:	49 f4       	brne	.+18     	; 0x19c <__vector_14+0x92>
		flag3 = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag3>
		contor_led_3 =  timp_led_3;
 190:	88 ee       	ldi	r24, 0xE8	; 232
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <aprinde_led_1>:


void aprinde_led_1()
{
	if(flag1 == 1 )
 1b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag1>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <aprinde_led_1+0x16>
	{
		pinToggle(&LED0_PORT, LED0_PIN);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 79 00 	call	0xf2	; 0xf2 <pinToggle>
		flag1 = 0;
 1c4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag1>
 1c8:	08 95       	ret

000001ca <aprinde_led_2>:
	}
}

void aprinde_led_2()
{
	if(flag2 == 1 )
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag2>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <aprinde_led_2+0x16>
	{
		pinToggle(&LED1_PORT, LED1_PIN);
 1d2:	65 e0       	ldi	r22, 0x05	; 5
 1d4:	8b e2       	ldi	r24, 0x2B	; 43
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 79 00 	call	0xf2	; 0xf2 <pinToggle>
		flag2 = 0;
 1dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag2>
 1e0:	08 95       	ret

000001e2 <aprinde_led_3>:
}


void aprinde_led_3()
{
	if(flag3 == 1 )
 1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag3>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <aprinde_led_3+0x16>
	{
		pinToggle(&LED2_PORT, LED2_PIN);
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	8b e2       	ldi	r24, 0x2B	; 43
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 79 00 	call	0xf2	; 0xf2 <pinToggle>
		flag3 = 0;
 1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag3>
 1f8:	08 95       	ret

000001fa <main>:
	}
}

int main(void)
{
	init_data();
 1fa:	0e 94 48 00 	call	0x90	; 0x90 <init_data>
	init_devices();
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <init_devices>

	do{
		aprinde_led_1();
 202:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <aprinde_led_1>
		aprinde_led_2();
 206:	0e 94 e5 00 	call	0x1ca	; 0x1ca <aprinde_led_2>
		aprinde_led_3();
 20a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <aprinde_led_3>
 20e:	f9 cf       	rjmp	.-14     	; 0x202 <main+0x8>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
