
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009dd  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b5  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048e  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ab  00000000  00000000  00001f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "USART_slave.h"


int main(void)
{
	init_devices();
  90:	0e 94 0a 01 	call	0x214	; 0x214 <init_devices>
	USART_Init(MYUBRR);
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 b3 00 	call	0x166	; 0x166 <USART_Init>
	
	//pinReset(&PORT_TX, PIN_TX);
	
	do
	{	
		if(FLAG_STOP_TIMER_USART == 1)
  9c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <FLAG_STOP_TIMER_USART>
  a0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <FLAG_STOP_TIMER_USART+0x1>
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	d1 f7       	brne	.-12     	; 0x9c <main+0xc>
		{
			if(p_usart0.CONTOR_BUFFER_USART > 16){
				p_usart0.CONTOR_BUFFER_USART = 16;
			}
			
			p_usart0.CONTOR_BUFFER_USART = 0;
  a8:	e7 e0       	ldi	r30, 0x07	; 7
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	10 82       	st	Z, r1
			FLAG_STOP_TIMER_USART = 0;
  ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <FLAG_STOP_TIMER_USART+0x1>
  b2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <FLAG_STOP_TIMER_USART>
			FLAG_START_TIMER_USART = 0;
  b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <FLAG_START_TIMER_USART+0x1>
  ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <FLAG_START_TIMER_USART>
			
		
			p_usart0.BUFFER_RX_USART[4] = p_usart0.BUFFER_RX_USART[4] + 1;
  be:	85 81       	ldd	r24, Z+5	; 0x05
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	85 83       	std	Z+5, r24	; 0x05
			USART0_TX_SIR_SIZE(&p_usart0);
  c4:	cf 01       	movw	r24, r30
  c6:	0e 94 99 00 	call	0x132	; 0x132 <USART0_TX_SIR_SIZE>
  ca:	e8 cf       	rjmp	.-48     	; 0x9c <main+0xc>

000000cc <__vector_18>:
	
}


void init_data(void){
	CONTOR_RX_TIMER_USART = TIMER_RX_USART ;
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	a7 e0       	ldi	r26, 0x07	; 7
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	8c 91       	ld	r24, X
  ec:	e8 2f       	mov	r30, r24
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f4:	e9 5f       	subi	r30, 0xF9	; 249
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	91 83       	std	Z+1, r25	; 0x01
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <FLAG_START_TIMER_USART+0x1>
 102:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <FLAG_START_TIMER_USART>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	8c 93       	st	X, r24
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <USART0_TX_CHAR>:
 124:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 128:	95 ff       	sbrs	r25, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <USART0_TX_CHAR>
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 130:	08 95       	ret

00000132 <USART0_TX_SIR_SIZE>:
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	8c 01       	movw	r16, r24
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	07 c0       	rjmp	.+14     	; 0x150 <USART0_TX_SIR_SIZE+0x1e>
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	81 81       	ldd	r24, Z+1	; 0x01
 14a:	0e 94 92 00 	call	0x124	; 0x124 <USART0_TX_CHAR>
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	f8 01       	movw	r30, r16
 152:	80 81       	ld	r24, Z
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	c8 17       	cp	r28, r24
 158:	d9 07       	cpc	r29, r25
 15a:	9c f3       	brlt	.-26     	; 0x142 <USART0_TX_SIR_SIZE+0x10>
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <USART_Init>:
 166:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 16e:	a1 ec       	ldi	r26, 0xC1	; 193
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	1c 92       	st	X, r1
 174:	e2 ec       	ldi	r30, 0xC2	; 194
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
 17a:	8c 91       	ld	r24, X
 17c:	88 69       	ori	r24, 0x98	; 152
 17e:	8c 93       	st	X, r24
 180:	80 81       	ld	r24, Z
 182:	86 60       	ori	r24, 0x06	; 6
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <__vector_14>:
}


ISR(TIMER0_COMPA_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	if(FLAG_START_TIMER_USART == 1){
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <FLAG_START_TIMER_USART>
 19a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <FLAG_START_TIMER_USART+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <__vector_14+0x2c>
		CONTOR_RX_TIMER_USART--;
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	if(CONTOR_RX_TIMER_USART == 0){
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1bc:	89 2b       	or	r24, r25
 1be:	61 f4       	brne	.+24     	; 0x1d8 <__vector_14+0x50>
		FLAG_STOP_TIMER_USART = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <FLAG_STOP_TIMER_USART+0x1>
 1c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <FLAG_STOP_TIMER_USART>
		CONTOR_RX_TIMER_USART = TIMER_RX_USART;
 1cc:	8e e1       	ldi	r24, 0x1E	; 30
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

}
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <timer0_init>:



void timer0_init(void){
	TCCR0A |= (1 << WGM01);
 1e6:	84 b5       	in	r24, 0x24	; 36
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00);
 1ec:	85 b5       	in	r24, 0x25	; 37
 1ee:	83 60       	ori	r24, 0x03	; 3
 1f0:	85 bd       	out	0x25, r24	; 37

	OCR0A = 0xF9; //249
 1f2:	89 ef       	ldi	r24, 0xF9	; 249
 1f4:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= 1 << OCIE0A;
 1f6:	ee e6       	ldi	r30, 0x6E	; 110
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <init_porturi>:
}


void init_porturi(void)
{
	DDRB  = 0xFF; // output
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0x00; // low
 206:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0x7F;
 208:	9f e7       	ldi	r25, 0x7F	; 127
 20a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0x00;
 20c:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0xFF;
 20e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 210:	1b b8       	out	0x0b, r1	; 11
 212:	08 95       	ret

00000214 <init_devices>:
}

void init_devices(void)
{
	cli();
 214:	f8 94       	cli
	init_porturi();
 216:	0e 94 01 01 	call	0x202	; 0x202 <init_porturi>
	timer0_init();
 21a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <timer0_init>
	sei();
 21e:	78 94       	sei
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
