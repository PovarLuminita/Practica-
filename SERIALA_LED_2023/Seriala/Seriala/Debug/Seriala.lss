
Seriala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae4  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000102  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000021a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	5f c0       	rjmp	.+190    	; 0x138 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	94 d0       	rcall	.+296    	; 0x1d2 <main>
  aa:	9a c0       	rjmp	.+308    	; 0x1e0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_data>:
void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
}

void pinReset(volatile uint8_t *port, uint8_t pin){
	*port &=  ~(1 << pin);
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_led+0x1>
  b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_led>
  ba:	08 95       	ret

000000bc <port_init>:
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	18 ba       	out	0x18, r1	; 24
  c2:	9f e7       	ldi	r25, 0x7F	; 127
  c4:	94 bb       	out	0x14, r25	; 20
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	81 bb       	out	0x11, r24	; 17
  ca:	12 ba       	out	0x12, r1	; 18
  cc:	08 95       	ret

000000ce <timer0_init>:
  ce:	13 be       	out	0x33, r1	; 51
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	83 bf       	out	0x33, r24	; 51
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	83 bf       	out	0x33, r24	; 51
  da:	11 be       	out	0x31, r1	; 49
  dc:	8c e7       	ldi	r24, 0x7C	; 124
  de:	81 bf       	out	0x31, r24	; 49
  e0:	17 be       	out	0x37, r1	; 55
  e2:	87 b7       	in	r24, 0x37	; 55
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	87 bf       	out	0x37, r24	; 55
  e8:	08 95       	ret

000000ea <init_devices>:
  ea:	f8 94       	cli
  ec:	e7 df       	rcall	.-50     	; 0xbc <port_init>
  ee:	ef df       	rcall	.-34     	; 0xce <timer0_init>
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <__vector_16>:
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contor_led>
 106:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <contor_led+0x1>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_led+0x1>
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_led>
 114:	89 2b       	or	r24, r25
 116:	49 f4       	brne	.+18     	; 0x12a <__vector_16+0x36>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag>
 11e:	88 ee       	ldi	r24, 0xE8	; 232
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_led+0x1>
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_led>
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_30>:
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <data>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <USART_Init>:
 15e:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 162:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 166:	ea e9       	ldi	r30, 0x9A	; 154
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 69       	ori	r24, 0x98	; 152
 16e:	80 83       	st	Z, r24
 170:	ed e9       	ldi	r30, 0x9D	; 157
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	86 60       	ori	r24, 0x06	; 6
 178:	80 83       	st	Z, r24
 17a:	85 b7       	in	r24, 0x35	; 53
 17c:	83 7e       	andi	r24, 0xE3	; 227
 17e:	85 bf       	out	0x35, r24	; 53
 180:	78 94       	sei
 182:	08 95       	ret

00000184 <pinToggle>:
 184:	fc 01       	movw	r30, r24
 186:	40 81       	ld	r20, Z
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <pinToggle+0xe>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <pinToggle+0xa>
 196:	24 27       	eor	r18, r20
 198:	20 83       	st	Z, r18
 19a:	08 95       	ret

0000019c <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
	//ASTEPT SA SE GOLEASCA BUFFERUL PENTRU TRANSMIS
	while(!(UCSR1A &(1<<UDRE1)));
 19c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <USART_Transmit>
	
	//PUN DATE IN BUFFER, TRIMIT DATELE
	UDR1 = data;//SCRIU IN REGISTRU
 1a4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1a8:	08 95       	ret

000001aa <aprinde_led>:
}


void aprinde_led()
{
	if(flag_rx == 1 )
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	31 f4       	brne	.+12     	; 0x1be <aprinde_led+0x14>
	{
		//USART_Transmit(66);
		pinToggle(&PORT_LED, PIN_LED);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	e5 df       	rcall	.-54     	; 0x184 <pinToggle>
		flag_rx = 0;
 1ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	if(flag == 1){
 1be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <aprinde_led+0x26>
		USART_Transmit(66);
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	e8 df       	rcall	.-48     	; 0x19c <USART_Transmit>
		flag = 0;
 1cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag>
 1d0:	08 95       	ret

000001d2 <main>:
	}
}

int main(void){
	init_data();
 1d2:	6d df       	rcall	.-294    	; 0xae <init_data>
	init_devices();
 1d4:	8a df       	rcall	.-236    	; 0xea <init_devices>
 1d6:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(MYUBRR);
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	c1 df       	rcall	.-126    	; 0x15e <USART_Init>
	
	//pinSet(&PORT_LED, PIN_LED);
	do{
		aprinde_led();	
 1dc:	e6 df       	rcall	.-52     	; 0x1aa <aprinde_led>
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0xa>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
