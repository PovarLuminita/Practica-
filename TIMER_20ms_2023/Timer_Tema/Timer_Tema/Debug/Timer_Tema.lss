
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ec  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e0  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033e  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  88:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_init>:
	sei();
}

void port_init(void)
{
	DDRD  = 0xFF; // OUTPUT
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //LOW
  94:	1b b8       	out	0x0b, r1	; 11
  96:	08 95       	ret

00000098 <timer0_init>:
	//MOD CTC 
	/*
	Este un mod mai bun decat cel normal pentru a genera semnal dreptunghiular deoarece
	frecventa semnalului poate fi ajustata usor folosind registrul OCR0A
	*/
	TCCR0A |= (1 << WGM01);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	84 bd       	out	0x24, r24	; 36
	
	//PRESCALARUL. VA IMPARTI FRECVENTA DE LA INTRARE.
	TCCR0B |= (1 << CS02)|(1 << CS00); ///1024
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37

	//The output frequency if Fclock / prescaler / OCR.
	OCR0A = 0x9B; //249
  a4:	8b e9       	ldi	r24, 0x9B	; 155
  a6:	87 bd       	out	0x27, r24	; 39
	
	//ACTIVEZ INTRERUPEREA TIMER
	TIMSK0 |= 1 << OCIE0A;
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <init_devices>:
	while(1);
}

void init_devices(void)
{
	cli();
  b4:	f8 94       	cli
	port_init();
  b6:	0e 94 48 00 	call	0x90	; 0x90 <port_init>
	timer0_init();
  ba:	0e 94 4c 00 	call	0x98	; 0x98 <timer0_init>
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <pinToggle>:
	//ACTIVEZ INTRERUPEREA TIMER
	TIMSK0 |= 1 << OCIE0A;
}

void pinToggle(volatile uint8_t *port, uint8_t pin){
	*port ^=  1 << pin;
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pinToggle+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <pinToggle+0xa>
  d4:	24 27       	eor	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <__vector_14>:
}

// TIMER de 1000Hz. 
//ACEASTA INTRERUPERE VA FI GENERATA LA FIECARE 1ms
ISR(TIMER0_COMPA_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	
	contor_led_1++;
  f0:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <contor_led_1>
  f4:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <contor_led_1+0x1>
  f8:	4f 5f       	subi	r20, 0xFF	; 255
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
  fc:	50 93 08 01 	sts	0x0108, r21	; 0x800108 <contor_led_1+0x1>
 100:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <contor_led_1>
	contor_led_2++;
 104:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <contor_led_2>
 108:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <contor_led_2+0x1>
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <contor_led_2+0x1>
 114:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <contor_led_2>
	contor_led_3++;
 118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contor_led_3>
 11c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <contor_led_3+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <contor_led_3+0x1>
 126:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contor_led_3>
	
	if(contor_led_1 == timp_led_1){
 12a:	42 33       	cpi	r20, 0x32	; 50
 12c:	51 05       	cpc	r21, r1
 12e:	39 f4       	brne	.+14     	; 0x13e <__vector_14+0x64>
		flag_led_1 = 1;
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <flag_led_1>
		contor_led_1 =  0;
 136:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contor_led_1+0x1>
 13a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contor_led_1>
	}
	
	if(contor_led_2 == timp_led_2){
 13e:	24 36       	cpi	r18, 0x64	; 100
 140:	31 05       	cpc	r19, r1
 142:	39 f4       	brne	.+14     	; 0x152 <__vector_14+0x78>
		flag_led_2 = 1;
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <flag_led_2>
		contor_led_2 =  0;
 14a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <contor_led_2+0x1>
 14e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <contor_led_2>
	}
	
	if(contor_led_3 == timp_led_3){
 152:	86 39       	cpi	r24, 0x96	; 150
 154:	91 05       	cpc	r25, r1
 156:	39 f4       	brne	.+14     	; 0x166 <__vector_14+0x8c>
		flag_led_3 = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		contor_led_3 =  0;
 15e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contor_led_3+0x1>
 162:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contor_led_3>
	}
	
	
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <aprinde_led_1>:

void aprinde_led_1()
{
	if(flag_led_1 == 1 )
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_led_1>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	39 f4       	brne	.+14     	; 0x192 <aprinde_led_1+0x16>
	{
		pinToggle(&PORT_LED1, PIN_LED1);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	8b e2       	ldi	r24, 0x2B	; 43
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <pinToggle>
		flag_led_1 = 0;
 18e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_led_1>
 192:	08 95       	ret

00000194 <aprinde_led_2>:
	}
}

void aprinde_led_2()
{
	if(flag_led_2 == 1 )
 194:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_led_2>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	39 f4       	brne	.+14     	; 0x1aa <aprinde_led_2+0x16>
	{
		pinToggle(&PORT_LED2, PIN_LED2);
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 61 00 	call	0xc2	; 0xc2 <pinToggle>
		flag_led_2 = 0;
 1a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_led_2>
 1aa:	08 95       	ret

000001ac <aprinde_led_3>:
}


void aprinde_led_3()
{
	if(flag_led_3 == 1 )
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <aprinde_led_3+0x16>
	{
		pinToggle(&PORT_LED3, PIN_LED3);
 1b4:	66 e0       	ldi	r22, 0x06	; 6
 1b6:	8b e2       	ldi	r24, 0x2B	; 43
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 61 00 	call	0xc2	; 0xc2 <pinToggle>
		flag_led_3 = 0;
 1be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	08 95       	ret

000001c4 <main>:
uint8_t flag_led_2 = 0;
uint8_t flag_led_3 = 0;

int main(void)
{
	init_devices();
 1c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_devices>
	do{
		aprinde_led_1();
 1c8:	0e 94 be 00 	call	0x17c	; 0x17c <aprinde_led_1>
		aprinde_led_2();
 1cc:	0e 94 ca 00 	call	0x194	; 0x194 <aprinde_led_2>
		aprinde_led_3();
 1d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <aprinde_led_3>
 1d4:	f9 cf       	rjmp	.-14     	; 0x1c8 <main+0x4>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
