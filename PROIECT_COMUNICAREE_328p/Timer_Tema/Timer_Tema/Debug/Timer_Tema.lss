
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006db  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034a  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit_un_singur_caracter>:
	*port ^=  1 << pin;
}

void pinSet(volatile uint8_t *port, uint8_t pin)
{
	*port |=  1 << pin;
  90:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  94:	95 ff       	sbrs	r25, 5
  96:	fc cf       	rjmp	.-8      	; 0x90 <USART_Transmit_un_singur_caracter>
  98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  9c:	08 95       	ret

0000009e <__vector_18>:
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <initializare_porturi>:
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	9f e7       	ldi	r25, 0x7F	; 127
  cc:	97 b9       	out	0x07, r25	; 7
  ce:	18 b8       	out	0x08, r1	; 8
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	1b b8       	out	0x0b, r1	; 11
  d4:	08 95       	ret

000000d6 <initializare_devices>:
  d6:	f8 94       	cli
  d8:	0e 94 62 00 	call	0xc4	; 0xc4 <initializare_porturi>
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <USART_Initializare_registrii>:
  e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e8:	a1 ec       	ldi	r26, 0xC1	; 193
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	1c 92       	st	X, r1
  ee:	e2 ec       	ldi	r30, 0xC2	; 194
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
  f4:	8c 91       	ld	r24, X
  f6:	88 69       	ori	r24, 0x98	; 152
  f8:	8c 93       	st	X, r24
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 b7       	in	r24, 0x33	; 51
 102:	81 7f       	andi	r24, 0xF1	; 241
 104:	83 bf       	out	0x33, r24	; 51
 106:	78 94       	sei
 108:	08 95       	ret

0000010a <pinToggle>:
 10a:	fc 01       	movw	r30, r24
 10c:	40 81       	ld	r20, Z
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <pinToggle+0xe>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <pinToggle+0xa>
 11c:	24 27       	eor	r18, r20
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin)
{
 122:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 124:	90 81       	ld	r25, Z
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <pinReset+0xe>
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <pinReset+0xa>
 134:	20 95       	com	r18
 136:	29 23       	and	r18, r25
 138:	20 83       	st	Z, r18
 13a:	08 95       	ret

0000013c <main>:

///------------------------- COD ---------------------------------------------------------------------

int main(void)
{
	initializare_devices();
 13c:	0e 94 6b 00 	call	0xd6	; 0xd6 <initializare_devices>
	USART_Initializare_registrii(MYUBRR);
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Initializare_registrii>
	
	pinReset(&PORT_LED_328_VERIFICARE_PRIMIRE_CARACTER, PIN_LED_328_VERIFICARE_PRIMIRE_CARACTER);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 91 00 	call	0x122	; 0x122 <pinReset>
	
	do
	{
		if(flag_intrerupere_activare_la_primire_caracter == 1)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x16>
		{
			USART_Transmit_un_singur_caracter('C');
 15a:	83 e4       	ldi	r24, 0x43	; 67
 15c:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit_un_singur_caracter>
			pinToggle(&PORT_LED_328_VERIFICARE_PRIMIRE_CARACTER, PIN_LED_328_VERIFICARE_PRIMIRE_CARACTER);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 85 00 	call	0x10a	; 0x10a <pinToggle>
			flag_intrerupere_activare_la_primire_caracter = 0;
 16a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	f1 cf       	rjmp	.-30     	; 0x152 <main+0x16>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
