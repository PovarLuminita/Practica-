
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000912  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f3  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  88:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
	*port ^=  1 << pin;
}

void pinSet(volatile uint8_t *port, uint8_t pin)
{
	*port |=  1 << pin;
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <port_init>:
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	15 b8       	out	0x05, r1	; 5
  bc:	9f e7       	ldi	r25, 0x7F	; 127
  be:	97 b9       	out	0x07, r25	; 7
  c0:	18 b8       	out	0x08, r1	; 8
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	1b b8       	out	0x0b, r1	; 11
  c6:	08 95       	ret

000000c8 <init_devices>:
  c8:	f8 94       	cli
  ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <port_init>
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <USART_Init>:
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	a1 ec       	ldi	r26, 0xC1	; 193
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	1c 92       	st	X, r1
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	10 82       	st	Z, r1
  e6:	8c 91       	ld	r24, X
  e8:	88 69       	ori	r24, 0x98	; 152
  ea:	8c 93       	st	X, r24
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
  f2:	83 b7       	in	r24, 0x33	; 51
  f4:	81 7f       	andi	r24, 0xF1	; 241
  f6:	83 bf       	out	0x33, r24	; 51
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <pinToggle>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <pinToggle+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <pinToggle+0xa>
 10e:	24 27       	eor	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin)
{
 114:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 116:	90 81       	ld	r25, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <pinReset+0xe>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <pinReset+0xa>
 126:	20 95       	com	r18
 128:	29 23       	and	r18, r25
 12a:	20 83       	st	Z, r18
 12c:	08 95       	ret

0000012e <USART_Transmit>:

///USART
void USART_Transmit(unsigned char data)
{
	//wait for empty transmit buffer
	while(!(UCSR0A &(1<<UDRE0)));
 12e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 132:	95 ff       	sbrs	r25, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <USART_Transmit>
	
	//put data into buffer, sends the data
	UDR0 = data;//scriu in registru
 136:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 13a:	08 95       	ret

0000013c <main>:
///INTRERUPERE RECEPTIE 328p
ISR(USART_RX_vect);

int main(void)
{
	init_devices();
 13c:	0e 94 64 00 	call	0xc8	; 0xc8 <init_devices>
	USART_Init(MYUBRR);
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_Init>
	
	pinReset(&PORT_LED, PIN_LED);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 8a 00 	call	0x114	; 0x114 <pinReset>
	do
	{
		//USART_Receive(data);
		
		if(flag_rx == 1)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x16>
		{
			USART_Transmit('C');
 15a:	83 e4       	ldi	r24, 0x43	; 67
 15c:	0e 94 97 00 	call	0x12e	; 0x12e <USART_Transmit>
			pinToggle(&PORT_LED, PIN_LED);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 7e 00 	call	0xfc	; 0xfc <pinToggle>
			if(data == 'A'){
 16a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data>
 16e:	81 34       	cpi	r24, 0x41	; 65
 170:	29 f4       	brne	.+10     	; 0x17c <main+0x40>
				pinReset(&PORT_LED, PIN_LED);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8a 00 	call	0x114	; 0x114 <pinReset>
				flag_rx = 0;
			}
			flag_rx = 0;
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	e8 cf       	rjmp	.-48     	; 0x152 <main+0x16>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
