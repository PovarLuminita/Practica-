
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f91  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000708  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cc  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  9e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	
}


ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	uint8_t valoare = ADCL;
  b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	
	if(valoare > ADC_mijloc)
  b6:	89 37       	cpi	r24, 0x79	; 121
  b8:	20 f0       	brcs	.+8      	; 0xc2 <__vector_21+0x1c>
	{
		LED_ADC_PORT |= (1 << LED_ADC_PIN);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 b9       	out	0x05, r24	; 5
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <__vector_21+0x22>
	}else{
		LED_ADC_PORT &= ~(1 <<LED_ADC_PIN);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	85 b9       	out	0x05, r24	; 5
	}
}
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:
#include <avr/interrupt.h>


int main()
{
	DDRB = 0xFF; //out
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	84 b9       	out	0x04, r24	; 4
	

	PORTB = 0x00; //low
  d8:	15 b8       	out	0x05, r1	; 5
	

	
	sec_1 = 0;
  da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <sec_1>
	min_1 = 0;
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	h_1 = 0;
  e2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <h_1>
	
	initialize();
  e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <initialize>
///	init_data_contor();
//	init_timer();

	lcd_clear();
  ea:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_clear>
	lcd_setCursor();
  ee:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_setCursor>
// 	_delay_ms(2000);
	

	while(1)
	{
		LED_ADC_PORT |= (1 << LED_ADC_PIN);
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <main+0x1e>

000000fa <__vector_14>:
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_us(200);
	}
}
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contor_sec_1>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <contor_sec_1+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_sec_1+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_sec_1>
 11a:	89 2b       	or	r24, r25
 11c:	89 f4       	brne	.+34     	; 0x140 <__vector_14+0x46>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag1+0x1>
 126:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag1>
 12a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sec_1>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sec_1>
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_sec_1+0x1>
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_sec_1>
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <lcd_command>:
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	28 2f       	mov	r18, r24
 154:	20 7f       	andi	r18, 0xF0	; 240
 156:	92 2b       	or	r25, r18
 158:	9b b9       	out	0x0b, r25	; 11
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9d 7f       	andi	r25, 0xFD	; 253
 15e:	98 b9       	out	0x08, r25	; 8
 160:	98 b1       	in	r25, 0x08	; 8
 162:	94 60       	ori	r25, 0x04	; 4
 164:	98 b9       	out	0x08, r25	; 8
 166:	35 e0       	ldi	r19, 0x05	; 5
 168:	3a 95       	dec	r19
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_command+0x1a>
 16c:	00 00       	nop
 16e:	98 b1       	in	r25, 0x08	; 8
 170:	9b 7f       	andi	r25, 0xFB	; 251
 172:	98 b9       	out	0x08, r25	; 8
 174:	ef e1       	ldi	r30, 0x1F	; 31
 176:	f3 e0       	ldi	r31, 0x03	; 3
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_command+0x2a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_command+0x30>
 17e:	00 00       	nop
 180:	2b b1       	in	r18, 0x0b	; 11
 182:	f0 e1       	ldi	r31, 0x10	; 16
 184:	8f 9f       	mul	r24, r31
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	92 2f       	mov	r25, r18
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	89 2b       	or	r24, r25
 190:	8b b9       	out	0x0b, r24	; 11
 192:	88 b1       	in	r24, 0x08	; 8
 194:	84 60       	ori	r24, 0x04	; 4
 196:	88 b9       	out	0x08, r24	; 8
 198:	35 e0       	ldi	r19, 0x05	; 5
 19a:	3a 95       	dec	r19
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_command+0x4c>
 19e:	00 00       	nop
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_command+0x5c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_command+0x62>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <initialize>:
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	87 b9       	out	0x07, r24	; 7
 1b8:	8f e5       	ldi	r24, 0x5F	; 95
 1ba:	9a ee       	ldi	r25, 0xEA	; 234
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <initialize+0x8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <initialize+0xe>
 1c2:	00 00       	nop
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	9e e4       	ldi	r25, 0x4E	; 78
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <initialize+0x1a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <initialize+0x20>
 1d4:	00 00       	nop
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1dc:	87 e5       	ldi	r24, 0x57	; 87
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <initialize+0x2c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <initialize+0x32>
 1e6:	00 00       	nop
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9f e1       	ldi	r25, 0x1F	; 31
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <initialize+0x56>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <initialize+0x5c>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <lcd_clear>:
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9f e1       	ldi	r25, 0x1F	; 31
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_clear+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_clear+0x10>
 224:	00 00       	nop
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 22c:	08 95       	ret

0000022e <lcd_setCursor>:

void lcd_setCursor()
{
	
	
	lcd_command(1<<1); //return home
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <lcd_setCursor+0xc>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_setCursor+0x16>
 244:	00 00       	nop
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
