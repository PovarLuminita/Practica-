
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010c  0080010c  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088b  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000704  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000025bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	TIMSK0 |= 1 << OCIE0A;
}


void init_data(void){
	contor_rx = timp_rx;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <inc_ch>
  c0:	e8 2f       	mov	r30, r24
  c2:	08 2e       	mov	r0, r24
  c4:	00 0c       	add	r0, r0
  c6:	ff 0b       	sbc	r31, r31
  c8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	e0 5f       	subi	r30, 0xF0	; 240
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	90 83       	st	Z, r25
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <flag_start_timer+0x1>
  da:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <flag_start_timer>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <inc_ch>
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <USART_Transmit_caracter>:
  fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	95 ff       	sbrs	r25, 5
 100:	fc cf       	rjmp	.-8      	; 0xfa <USART_Transmit_caracter>
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 106:	08 95       	ret

00000108 <USART_Transmit_sir>:
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	7c 01       	movw	r14, r24
 116:	8b 01       	movw	r16, r22
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	07 c0       	rjmp	.+14     	; 0x12c <USART_Transmit_sir+0x24>
 11e:	f7 01       	movw	r30, r14
 120:	ec 0f       	add	r30, r28
 122:	fd 1f       	adc	r31, r29
 124:	80 81       	ld	r24, Z
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_caracter>
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	c0 17       	cp	r28, r16
 12e:	d1 07       	cpc	r29, r17
 130:	b4 f3       	brlt	.-20     	; 0x11e <USART_Transmit_sir+0x16>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_caracter>
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

00000146 <initializare_porturi>:
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	84 b9       	out	0x04, r24	; 4
 14a:	15 b8       	out	0x05, r1	; 5
 14c:	9f e7       	ldi	r25, 0x7F	; 127
 14e:	97 b9       	out	0x07, r25	; 7
 150:	18 b8       	out	0x08, r1	; 8
 152:	8a b9       	out	0x0a, r24	; 10
 154:	1b b8       	out	0x0b, r1	; 11
 156:	08 95       	ret

00000158 <USART_Initializare_registrii>:
 158:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 160:	a1 ec       	ldi	r26, 0xC1	; 193
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	1c 92       	st	X, r1
 166:	e2 ec       	ldi	r30, 0xC2	; 194
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	10 82       	st	Z, r1
 16c:	8c 91       	ld	r24, X
 16e:	88 69       	ori	r24, 0x98	; 152
 170:	8c 93       	st	X, r24
 172:	80 81       	ld	r24, Z
 174:	86 60       	ori	r24, 0x06	; 6
 176:	80 83       	st	Z, r24
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	81 7f       	andi	r24, 0xF1	; 241
 17c:	83 bf       	out	0x33, r24	; 51
 17e:	78 94       	sei
 180:	08 95       	ret

00000182 <pinToggle>:
 182:	fc 01       	movw	r30, r24
 184:	40 81       	ld	r20, Z
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <pinToggle+0xe>
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <pinToggle+0xa>
 194:	24 27       	eor	r18, r20
 196:	20 83       	st	Z, r18
 198:	08 95       	ret

0000019a <pinReset>:
 19a:	fc 01       	movw	r30, r24
 19c:	90 81       	ld	r25, Z
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <pinReset+0xe>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <pinReset+0xa>
 1ac:	20 95       	com	r18
 1ae:	29 23       	and	r18, r25
 1b0:	20 83       	st	Z, r18
 1b2:	08 95       	ret

000001b4 <timer0_init>:
 1b4:	84 b5       	in	r24, 0x24	; 36
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	84 bd       	out	0x24, r24	; 36
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	83 60       	ori	r24, 0x03	; 3
 1be:	85 bd       	out	0x25, r24	; 37
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	87 bd       	out	0x27, r24	; 39
 1c4:	ee e6       	ldi	r30, 0x6E	; 110
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <initializare_devices>:
 1d0:	f8 94       	cli
 1d2:	0e 94 a3 00 	call	0x146	; 0x146 <initializare_porturi>
 1d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <timer0_init>
 1da:	78 94       	sei
 1dc:	08 95       	ret

000001de <__vector_14>:
}


ISR(TIMER0_COMPA_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 	if(flag_start_timer == 1){
 1ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flag_start_timer>
 1f0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <flag_start_timer+0x1>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	49 f4       	brne	.+18     	; 0x20a <__vector_14+0x2c>
 		contor_rx--;
 1f8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <contor_rx>
 1fc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <contor_rx+0x1>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <contor_rx+0x1>
 206:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <contor_rx>
 	}
//	contor_rx--;
	
	if(contor_rx == 0){
 20a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <contor_rx>
 20e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <contor_rx+0x1>
 212:	89 2b       	or	r24, r25
 214:	61 f4       	brne	.+24     	; 0x22e <__vector_14+0x50>
		flag_stop = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 21e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		contor_rx = timp_rx;
 222:	8e e1       	ldi	r24, 0x1E	; 30
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <contor_rx+0x1>
 22a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <contor_rx>
	}

}
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <receive>:

void receive(){
	if(flag_stop == 1)
 23c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 240:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	e9 f4       	brne	.+58     	; 0x282 <receive+0x46>
	{
		inc_ch = 0;
 248:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <inc_ch>
		flag_stop = 0;
 24c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 250:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		flag_start_timer = 0;
 254:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <flag_start_timer+0x1>
 258:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <flag_start_timer>
		lcd_clear();
 25c:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_clear>
		lcd_setCursor();
 260:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_setCursor>
		lcd_print(buffer);
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_print>
		//USART_Transmit_caracter('a');
		USART_Transmit_sir("am primit  ", 10);
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 84 00 	call	0x108	; 0x108 <USART_Transmit_sir>
		pinToggle(&PORT_LED_328, PIN_LED_328);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	85 e2       	ldi	r24, 0x25	; 37
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 c1 00 	call	0x182	; 0x182 <pinToggle>
 282:	08 95       	ret

00000284 <main>:

///------------------------- COD ---------------------------------------------------------------------

int main(void)
{
	initialize();
 284:	0e 94 89 01 	call	0x312	; 0x312 <initialize>
	initializare_devices();
 288:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <initializare_devices>
	USART_Initializare_registrii(MYUBRR);
 28c:	87 e6       	ldi	r24, 0x67	; 103
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 ac 00 	call	0x158	; 0x158 <USART_Initializare_registrii>
	
	
	lcd_clear();
 294:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_clear>
	lcd_setCursor();
 298:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_setCursor>
	pinReset(&PORT_LED_328, PIN_LED_328);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	85 e2       	ldi	r24, 0x25	; 37
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 cd 00 	call	0x19a	; 0x19a <pinReset>
// 			pinToggle(&PORT_LED_328, PIN_LED_328);
// 			inc_ch = 0;
// 			flag_rx = 0;
// 		}
		
		receive();
 2a6:	0e 94 1e 01 	call	0x23c	; 0x23c <receive>
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <main+0x22>

000002ac <lcd_command>:
 2ac:	9b b1       	in	r25, 0x0b	; 11
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	28 2f       	mov	r18, r24
 2b2:	20 7f       	andi	r18, 0xF0	; 240
 2b4:	92 2b       	or	r25, r18
 2b6:	9b b9       	out	0x0b, r25	; 11
 2b8:	98 b1       	in	r25, 0x08	; 8
 2ba:	9d 7f       	andi	r25, 0xFD	; 253
 2bc:	98 b9       	out	0x08, r25	; 8
 2be:	98 b1       	in	r25, 0x08	; 8
 2c0:	94 60       	ori	r25, 0x04	; 4
 2c2:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	35 e0       	ldi	r19, 0x05	; 5
 2c6:	3a 95       	dec	r19
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_command+0x1a>
 2ca:	00 00       	nop
 2cc:	98 b1       	in	r25, 0x08	; 8
 2ce:	9b 7f       	andi	r25, 0xFB	; 251
 2d0:	98 b9       	out	0x08, r25	; 8
 2d2:	ef e1       	ldi	r30, 0x1F	; 31
 2d4:	f3 e0       	ldi	r31, 0x03	; 3
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_command+0x2a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_command+0x30>
 2dc:	00 00       	nop
 2de:	2b b1       	in	r18, 0x0b	; 11
 2e0:	f0 e1       	ldi	r31, 0x10	; 16
 2e2:	8f 9f       	mul	r24, r31
 2e4:	c0 01       	movw	r24, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	92 2f       	mov	r25, r18
 2ea:	9f 70       	andi	r25, 0x0F	; 15
 2ec:	89 2b       	or	r24, r25
 2ee:	8b b9       	out	0x0b, r24	; 11
 2f0:	88 b1       	in	r24, 0x08	; 8
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	88 b9       	out	0x08, r24	; 8
 2f6:	35 e0       	ldi	r19, 0x05	; 5
 2f8:	3a 95       	dec	r19
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_command+0x4c>
 2fc:	00 00       	nop
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	8b 7f       	andi	r24, 0xFB	; 251
 302:	88 b9       	out	0x08, r24	; 8
 304:	8f e1       	ldi	r24, 0x1F	; 31
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_command+0x5c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <lcd_command+0x62>
 30e:	00 00       	nop
 310:	08 95       	ret

00000312 <initialize>:
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	8f e5       	ldi	r24, 0x5F	; 95
 318:	9a ee       	ldi	r25, 0xEA	; 234
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <initialize+0x8>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <initialize+0xe>
 320:	00 00       	nop
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	9e e4       	ldi	r25, 0x4E	; 78
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <initialize+0x1a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <initialize+0x20>
 332:	00 00       	nop
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	87 e5       	ldi	r24, 0x57	; 87
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <initialize+0x2c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <initialize+0x32>
 344:	00 00       	nop
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 352:	88 e2       	ldi	r24, 0x28	; 40
 354:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 35e:	88 e0       	ldi	r24, 0x08	; 8
 360:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	9f e1       	ldi	r25, 0x1F	; 31
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <initialize+0x56>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <initialize+0x5c>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <lcd_clear>:
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 378:	8f e3       	ldi	r24, 0x3F	; 63
 37a:	9f e1       	ldi	r25, 0x1F	; 31
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_clear+0xa>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_clear+0x10>
 382:	00 00       	nop
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
 38a:	08 95       	ret

0000038c <lcd_print>:
 38c:	fc 01       	movw	r30, r24
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	3a c0       	rjmp	.+116    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 394:	8b b1       	in	r24, 0x0b	; 11
 396:	8f 70       	andi	r24, 0x0F	; 15
 398:	90 7f       	andi	r25, 0xF0	; 240
 39a:	98 2b       	or	r25, r24
 39c:	9b b9       	out	0x0b, r25	; 11
 39e:	88 b1       	in	r24, 0x08	; 8
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	88 b9       	out	0x08, r24	; 8
 3a4:	88 b1       	in	r24, 0x08	; 8
 3a6:	84 60       	ori	r24, 0x04	; 4
 3a8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	8a 95       	dec	r24
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_print+0x20>
 3b0:	00 00       	nop
 3b2:	8f e1       	ldi	r24, 0x1F	; 31
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_print+0x2a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <lcd_print+0x30>
 3bc:	00 00       	nop
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	8b 7f       	andi	r24, 0xFB	; 251
 3c2:	88 b9       	out	0x08, r24	; 8
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	93 e0       	ldi	r25, 0x03	; 3
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_print+0x3c>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_print+0x42>
 3ce:	00 00       	nop
 3d0:	4b b1       	in	r20, 0x0b	; 11
 3d2:	9c 91       	ld	r25, X
 3d4:	80 e1       	ldi	r24, 0x10	; 16
 3d6:	98 9f       	mul	r25, r24
 3d8:	90 01       	movw	r18, r0
 3da:	11 24       	eor	r1, r1
 3dc:	94 2f       	mov	r25, r20
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	29 2b       	or	r18, r25
 3e2:	2b b9       	out	0x0b, r18	; 11
 3e4:	98 b1       	in	r25, 0x08	; 8
 3e6:	94 60       	ori	r25, 0x04	; 4
 3e8:	98 b9       	out	0x08, r25	; 8
 3ea:	95 e0       	ldi	r25, 0x05	; 5
 3ec:	9a 95       	dec	r25
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_print+0x60>
 3f0:	00 00       	nop
 3f2:	98 b1       	in	r25, 0x08	; 8
 3f4:	9b 7f       	andi	r25, 0xFB	; 251
 3f6:	98 b9       	out	0x08, r25	; 8
 3f8:	8f e1       	ldi	r24, 0x1F	; 31
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <lcd_print+0x70>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	df 01       	movw	r26, r30
 40a:	a6 0f       	add	r26, r22
 40c:	b7 1f       	adc	r27, r23
 40e:	9c 91       	ld	r25, X
 410:	91 11       	cpse	r25, r1
 412:	c0 cf       	rjmp	.-128    	; 0x394 <lcd_print+0x8>
 414:	08 95       	ret

00000416 <lcd_setCursor>:
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	89 ef       	ldi	r24, 0xF9	; 249
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <lcd_setCursor+0xc>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <lcd_setCursor+0x16>
 42c:	00 00       	nop
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
