
Seriala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000396  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	27 c0       	rjmp	.+78     	; 0xc8 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	50 d0       	rcall	.+160    	; 0x14a <main>
  aa:	76 c0       	rjmp	.+236    	; 0x198 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <port_init>:
  	
  }


void pinToggle(volatile uint8_t *port, uint8_t pin){
	*port ^=  1 << pin;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	18 ba       	out	0x18, r1	; 24
  b4:	9f e7       	ldi	r25, 0x7F	; 127
  b6:	94 bb       	out	0x14, r25	; 20
  b8:	15 ba       	out	0x15, r1	; 21
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	12 ba       	out	0x12, r1	; 18
  be:	08 95       	ret

000000c0 <init_devices>:
  c0:	f8 94       	cli
  c2:	f5 df       	rcall	.-22     	; 0xae <port_init>
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <__vector_30>:
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_rx>
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <USART_Init>:
  f2:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  f6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 69       	ori	r24, 0x98	; 152
 102:	80 83       	st	Z, r24
 104:	ed e9       	ldi	r30, 0x9D	; 157
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	83 7e       	andi	r24, 0xE3	; 227
 112:	85 bf       	out	0x35, r24	; 53
 114:	78 94       	sei
 116:	08 95       	ret

00000118 <pinSet>:
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
 118:	fc 01       	movw	r30, r24
 11a:	40 81       	ld	r20, Z
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <pinSet+0xe>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <pinSet+0xa>
 12a:	24 2b       	or	r18, r20
 12c:	20 83       	st	Z, r18
 12e:	08 95       	ret

00000130 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
 130:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 132:	90 81       	ld	r25, Z
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <pinReset+0xe>
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <pinReset+0xa>
 142:	20 95       	com	r18
 144:	29 23       	and	r18, r25
 146:	20 83       	st	Z, r18
 148:	08 95       	ret

0000014a <main>:
}


int main(void){
	//init_data();
	init_devices();
 14a:	ba df       	rcall	.-140    	; 0xc0 <init_devices>
	USART_Init(MYUBRR);
 14c:	87 e6       	ldi	r24, 0x67	; 103
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	d0 df       	rcall	.-96     	; 0xf2 <USART_Init>
	do{
		
		//aprinde_led();
	if(flag_rx == 1)
 152:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_rx>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x8>
	{	
//METODA SWITCH/CASE
switch(data){
 15a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
 15e:	82 34       	cpi	r24, 0x42	; 66
 160:	49 f0       	breq	.+18     	; 0x174 <main+0x2a>
 162:	18 f4       	brcc	.+6      	; 0x16a <main+0x20>
 164:	81 34       	cpi	r24, 0x41	; 65
 166:	a1 f0       	breq	.+40     	; 0x190 <main+0x46>
 168:	f4 cf       	rjmp	.-24     	; 0x152 <main+0x8>
 16a:	8e 34       	cpi	r24, 0x4E	; 78
 16c:	69 f0       	breq	.+26     	; 0x188 <main+0x3e>
 16e:	85 35       	cpi	r24, 0x55	; 85
 170:	31 f0       	breq	.+12     	; 0x17e <main+0x34>
 172:	ef cf       	rjmp	.-34     	; 0x152 <main+0x8>
	case 66: pinSet(&PORT_LED_128, PIN_LED_128);  //B
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ce df       	rcall	.-100    	; 0x118 <pinSet>
	break;
 17c:	ea cf       	rjmp	.-44     	; 0x152 <main+0x8>
	case 85: pinReset(&PORT_LED_128, PIN_LED_128); //U
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	d5 df       	rcall	.-86     	; 0x130 <pinReset>
	break;
 186:	e5 cf       	rjmp	.-54     	; 0x152 <main+0x8>
	case 78: UDR1 = 65; //N
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	break;
 18e:	e1 cf       	rjmp	.-62     	; 0x152 <main+0x8>
	case 65: UDR1 = 65; //A
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	break;
 196:	dd cf       	rjmp	.-70     	; 0x152 <main+0x8>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
