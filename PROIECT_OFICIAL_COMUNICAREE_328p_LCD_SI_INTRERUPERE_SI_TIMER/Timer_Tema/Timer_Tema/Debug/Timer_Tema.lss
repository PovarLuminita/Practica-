
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010c  0080010c  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc2  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000871  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006db  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000024ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005da  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c8  00000000  00000000  00002c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  9e:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	TIMSK0 |= 1 << OCIE0A;
}


void init_data(void){
	contor_rx = timp_rx;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <inc_ch>
  c0:	e8 2f       	mov	r30, r24
  c2:	08 2e       	mov	r0, r24
  c4:	00 0c       	add	r0, r0
  c6:	ff 0b       	sbc	r31, r31
  c8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	e0 5f       	subi	r30, 0xF0	; 240
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	90 83       	st	Z, r25
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <flag_start_timer+0x1>
  da:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <flag_start_timer>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <inc_ch>
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <USART_Transmit_caracter>:
  fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	95 ff       	sbrs	r25, 5
 100:	fc cf       	rjmp	.-8      	; 0xfa <USART_Transmit_caracter>
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 106:	08 95       	ret

00000108 <USART_Transmit_sir>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	03 c0       	rjmp	.+6      	; 0x116 <USART_Transmit_sir+0xe>
 110:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_caracter>
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	88 81       	ld	r24, Y
 118:	81 11       	cpse	r24, r1
 11a:	fa cf       	rjmp	.-12     	; 0x110 <USART_Transmit_sir+0x8>
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit_caracter>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <initializare_porturi>:
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 b9       	out	0x04, r24	; 4
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	9f e7       	ldi	r25, 0x7F	; 127
 12e:	97 b9       	out	0x07, r25	; 7
 130:	18 b8       	out	0x08, r1	; 8
 132:	8a b9       	out	0x0a, r24	; 10
 134:	1b b8       	out	0x0b, r1	; 11
 136:	08 95       	ret

00000138 <USART_Initializare_registrii>:
 138:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 140:	a1 ec       	ldi	r26, 0xC1	; 193
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	1c 92       	st	X, r1
 146:	e2 ec       	ldi	r30, 0xC2	; 194
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
 14c:	8c 91       	ld	r24, X
 14e:	88 69       	ori	r24, 0x98	; 152
 150:	8c 93       	st	X, r24
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	81 7f       	andi	r24, 0xF1	; 241
 15c:	83 bf       	out	0x33, r24	; 51
 15e:	78 94       	sei
 160:	08 95       	ret

00000162 <pinToggle>:
 162:	fc 01       	movw	r30, r24
 164:	40 81       	ld	r20, Z
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <pinToggle+0xe>
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <pinToggle+0xa>
 174:	24 27       	eor	r18, r20
 176:	20 83       	st	Z, r18
 178:	08 95       	ret

0000017a <pinReset>:
 17a:	fc 01       	movw	r30, r24
 17c:	90 81       	ld	r25, Z
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <pinReset+0xe>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <pinReset+0xa>
 18c:	20 95       	com	r18
 18e:	29 23       	and	r18, r25
 190:	20 83       	st	Z, r18
 192:	08 95       	ret

00000194 <timer0_init>:
 194:	84 b5       	in	r24, 0x24	; 36
 196:	82 60       	ori	r24, 0x02	; 2
 198:	84 bd       	out	0x24, r24	; 36
 19a:	85 b5       	in	r24, 0x25	; 37
 19c:	83 60       	ori	r24, 0x03	; 3
 19e:	85 bd       	out	0x25, r24	; 37
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	87 bd       	out	0x27, r24	; 39
 1a4:	ee e6       	ldi	r30, 0x6E	; 110
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <initializare_devices>:
 1b0:	f8 94       	cli
 1b2:	0e 94 93 00 	call	0x126	; 0x126 <initializare_porturi>
 1b6:	0e 94 ca 00 	call	0x194	; 0x194 <timer0_init>
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <main>:
 1be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <initialize>
 1c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <initializare_devices>
 1c6:	87 e6       	ldi	r24, 0x67	; 103
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Initializare_registrii>
 1ce:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_clear>
 1d2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_setCursor>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 bd 00 	call	0x17a	; 0x17a <pinReset>
 1e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	d1 f7       	brne	.-12     	; 0x1e0 <main+0x22>
 1ec:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_clear>
 1f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_setCursor>
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_print>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 84 00 	call	0x108	; 0x108 <USART_Transmit_sir>
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 b1 00 	call	0x162	; 0x162 <pinToggle>
 20e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <inc_ch>
 212:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 216:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 21a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <flag_start_timer+0x1>
 21e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <flag_start_timer>
 222:	de cf       	rjmp	.-68     	; 0x1e0 <main+0x22>

00000224 <__vector_14>:
}


ISR(TIMER0_COMPA_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 	if(flag_start_timer == 1){
 232:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flag_start_timer>
 236:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <flag_start_timer+0x1>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	49 f4       	brne	.+18     	; 0x250 <__vector_14+0x2c>
 		contor_rx--;
 23e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <contor_rx>
 242:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <contor_rx+0x1>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <contor_rx+0x1>
 24c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <contor_rx>
 	}
//	contor_rx--;
	
	if(contor_rx == 0){
 250:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <contor_rx>
 254:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <contor_rx+0x1>
 258:	89 2b       	or	r24, r25
 25a:	61 f4       	brne	.+24     	; 0x274 <__vector_14+0x50>
		flag_stop = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 264:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		contor_rx = timp_rx;
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <contor_rx+0x1>
 270:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <contor_rx>
	}

}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <lcd_command>:
 282:	9b b1       	in	r25, 0x0b	; 11
 284:	9f 70       	andi	r25, 0x0F	; 15
 286:	28 2f       	mov	r18, r24
 288:	20 7f       	andi	r18, 0xF0	; 240
 28a:	92 2b       	or	r25, r18
 28c:	9b b9       	out	0x0b, r25	; 11
 28e:	98 b1       	in	r25, 0x08	; 8
 290:	9d 7f       	andi	r25, 0xFD	; 253
 292:	98 b9       	out	0x08, r25	; 8
 294:	98 b1       	in	r25, 0x08	; 8
 296:	94 60       	ori	r25, 0x04	; 4
 298:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	35 e0       	ldi	r19, 0x05	; 5
 29c:	3a 95       	dec	r19
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_command+0x1a>
 2a0:	00 00       	nop
 2a2:	98 b1       	in	r25, 0x08	; 8
 2a4:	9b 7f       	andi	r25, 0xFB	; 251
 2a6:	98 b9       	out	0x08, r25	; 8
 2a8:	ef e1       	ldi	r30, 0x1F	; 31
 2aa:	f3 e0       	ldi	r31, 0x03	; 3
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_command+0x2a>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcd_command+0x30>
 2b2:	00 00       	nop
 2b4:	2b b1       	in	r18, 0x0b	; 11
 2b6:	f0 e1       	ldi	r31, 0x10	; 16
 2b8:	8f 9f       	mul	r24, r31
 2ba:	c0 01       	movw	r24, r0
 2bc:	11 24       	eor	r1, r1
 2be:	92 2f       	mov	r25, r18
 2c0:	9f 70       	andi	r25, 0x0F	; 15
 2c2:	89 2b       	or	r24, r25
 2c4:	8b b9       	out	0x0b, r24	; 11
 2c6:	88 b1       	in	r24, 0x08	; 8
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	88 b9       	out	0x08, r24	; 8
 2cc:	35 e0       	ldi	r19, 0x05	; 5
 2ce:	3a 95       	dec	r19
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_command+0x4c>
 2d2:	00 00       	nop
 2d4:	88 b1       	in	r24, 0x08	; 8
 2d6:	8b 7f       	andi	r24, 0xFB	; 251
 2d8:	88 b9       	out	0x08, r24	; 8
 2da:	8f e1       	ldi	r24, 0x1F	; 31
 2dc:	93 e0       	ldi	r25, 0x03	; 3
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_command+0x5c>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_command+0x62>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <initialize>:
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f e5       	ldi	r24, 0x5F	; 95
 2ee:	9a ee       	ldi	r25, 0xEA	; 234
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <initialize+0x8>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <initialize+0xe>
 2f6:	00 00       	nop
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 2fe:	8f e1       	ldi	r24, 0x1F	; 31
 300:	9e e4       	ldi	r25, 0x4E	; 78
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <initialize+0x1a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <initialize+0x20>
 308:	00 00       	nop
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	87 e5       	ldi	r24, 0x57	; 87
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <initialize+0x2c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <initialize+0x32>
 31a:	00 00       	nop
 31c:	80 e3       	ldi	r24, 0x30	; 48
 31e:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	8f e3       	ldi	r24, 0x3F	; 63
 33c:	9f e1       	ldi	r25, 0x1F	; 31
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <initialize+0x56>
 342:	00 c0       	rjmp	.+0      	; 0x344 <initialize+0x5c>
 344:	00 00       	nop
 346:	08 95       	ret

00000348 <lcd_clear>:
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9f e1       	ldi	r25, 0x1F	; 31
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <lcd_clear+0xa>
 356:	00 c0       	rjmp	.+0      	; 0x358 <lcd_clear+0x10>
 358:	00 00       	nop
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 360:	08 95       	ret

00000362 <lcd_print>:
 362:	fc 01       	movw	r30, r24
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	3a c0       	rjmp	.+116    	; 0x3de <lcd_print+0x7c>
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	90 7f       	andi	r25, 0xF0	; 240
 370:	98 2b       	or	r25, r24
 372:	9b b9       	out	0x0b, r25	; 11
 374:	88 b1       	in	r24, 0x08	; 8
 376:	82 60       	ori	r24, 0x02	; 2
 378:	88 b9       	out	0x08, r24	; 8
 37a:	88 b1       	in	r24, 0x08	; 8
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	85 e0       	ldi	r24, 0x05	; 5
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <lcd_print+0x20>
 386:	00 00       	nop
 388:	8f e1       	ldi	r24, 0x1F	; 31
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_print+0x2a>
 390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_print+0x30>
 392:	00 00       	nop
 394:	88 b1       	in	r24, 0x08	; 8
 396:	8b 7f       	andi	r24, 0xFB	; 251
 398:	88 b9       	out	0x08, r24	; 8
 39a:	8f e1       	ldi	r24, 0x1F	; 31
 39c:	93 e0       	ldi	r25, 0x03	; 3
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_print+0x3c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <lcd_print+0x42>
 3a4:	00 00       	nop
 3a6:	4b b1       	in	r20, 0x0b	; 11
 3a8:	9c 91       	ld	r25, X
 3aa:	80 e1       	ldi	r24, 0x10	; 16
 3ac:	98 9f       	mul	r25, r24
 3ae:	90 01       	movw	r18, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	94 2f       	mov	r25, r20
 3b4:	9f 70       	andi	r25, 0x0F	; 15
 3b6:	29 2b       	or	r18, r25
 3b8:	2b b9       	out	0x0b, r18	; 11
 3ba:	98 b1       	in	r25, 0x08	; 8
 3bc:	94 60       	ori	r25, 0x04	; 4
 3be:	98 b9       	out	0x08, r25	; 8
 3c0:	95 e0       	ldi	r25, 0x05	; 5
 3c2:	9a 95       	dec	r25
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_print+0x60>
 3c6:	00 00       	nop
 3c8:	98 b1       	in	r25, 0x08	; 8
 3ca:	9b 7f       	andi	r25, 0xFB	; 251
 3cc:	98 b9       	out	0x08, r25	; 8
 3ce:	8f e1       	ldi	r24, 0x1F	; 31
 3d0:	93 e0       	ldi	r25, 0x03	; 3
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_print+0x70>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lcd_print+0x76>
 3d8:	00 00       	nop
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	df 01       	movw	r26, r30
 3e0:	a6 0f       	add	r26, r22
 3e2:	b7 1f       	adc	r27, r23
 3e4:	9c 91       	ld	r25, X
 3e6:	91 11       	cpse	r25, r1
 3e8:	c0 cf       	rjmp	.-128    	; 0x36a <lcd_print+0x8>
 3ea:	08 95       	ret

000003ec <lcd_setCursor>:
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	89 ef       	ldi	r24, 0xF9	; 249
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <lcd_setCursor+0xc>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
