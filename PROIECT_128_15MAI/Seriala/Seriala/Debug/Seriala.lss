
Seriala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000045e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800104  00800104  000004f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c8  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  00002096  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040b  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000336d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b4 c0       	rjmp	.+360    	; 0x1aa <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c1       	rjmp	.+670    	; 0x2e8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	0b c1       	rjmp	.+534    	; 0x290 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	ca c1       	rjmp	.+916    	; 0x45a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include <avr/interrupt.h>
#include <string.h>

int main(void)
{
	CONTOR_INIT();
  c8:	81 d1       	rcall	.+770    	; 0x3cc <CONTOR_INIT>
	DEVICES_INIT();
  ca:	96 d1       	rcall	.+812    	; 0x3f8 <DEVICES_INIT>
  cc:	87 e6       	ldi	r24, 0x67	; 103
	USART0_INIT(MYUBRR);
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	98 d1       	rcall	.+816    	; 0x402 <USART0_INIT>
  d2:	87 e6       	ldi	r24, 0x67	; 103
	USART1_INIT(MYUBRR);
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	a5 d1       	rcall	.+842    	; 0x422 <USART1_INIT>
  d8:	61 e0       	ldi	r22, 0x01	; 1
	
	pinReset(&PORT_LED_RX_USART0,PIN_LED_RX_USART0);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	5b d1       	rcall	.+694    	; 0x396 <pinReset>
  e0:	60 e0       	ldi	r22, 0x00	; 0
	pinReset(&PORT_LED_RX_USART1,PIN_LED_RX_USART1);
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	57 d1       	rcall	.+686    	; 0x396 <pinReset>
  e8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <flag_stop_USART1>
	
	do{
		if(flag_stop_USART1 == 1)
  ec:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <flag_stop_USART1+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	c1 f5       	brne	.+112    	; 0x164 <main+0x9c>
  f4:	04 e3       	ldi	r16, 0x34	; 52
  f6:	11 e0       	ldi	r17, 0x01	; 1
		{
			
			///bufferul pe care-l primesc, pe o anunmita pozitie fac +1
			memcpy(buffer_Tx_USART0, buffer_UDR1, strlen(buffer_UDR1) + 1);
  f8:	f8 01       	movw	r30, r16
  fa:	01 90       	ld	r0, Z+
  fc:	00 20       	and	r0, r0
  fe:	e9 f7       	brne	.-6      	; 0xfa <main+0x32>
 100:	c8 e1       	ldi	r28, 0x18	; 24
 102:	d1 e0       	ldi	r29, 0x01	; 1
 104:	af 01       	movw	r20, r30
 106:	44 53       	subi	r20, 0x34	; 52
 108:	51 40       	sbci	r21, 0x01	; 1
 10a:	b8 01       	movw	r22, r16
 10c:	ce 01       	movw	r24, r28
 10e:	9c d1       	rcall	.+824    	; 0x448 <memcpy>
 110:	8e 81       	ldd	r24, Y+6	; 0x06
 112:	8f 5f       	subi	r24, 0xFF	; 255
			buffer_Tx_USART0[6] = buffer_Tx_USART0[6] + 1;
 114:	8e 83       	std	Y+6, r24	; 0x06
 116:	fe 01       	movw	r30, r28
 118:	01 90       	ld	r0, Z+
			
			USART0_Tx_size(buffer_Tx_USART0, strlen(buffer_Tx_USART0));
 11a:	00 20       	and	r0, r0
 11c:	e9 f7       	brne	.-6      	; 0x118 <main+0x50>
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	bf 01       	movw	r22, r30
 122:	68 51       	subi	r22, 0x18	; 24
 124:	71 40       	sbci	r23, 0x01	; 1
 126:	ce 01       	movw	r24, r28
 128:	10 d1       	rcall	.+544    	; 0x34a <USART0_Tx_size>
 12a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <cnt_UDR1>
			
			cnt_UDR1 = 0;
 12e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <flag_stop_USART1+0x1>
			flag_stop_USART1 = 0;
 132:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <flag_stop_USART1>
 136:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag_start_USART1+0x1>
			flag_start_USART1 = 0;
 13a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag_start_USART1>
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	f8 01       	movw	r30, r16
			memset(buffer_UDR1, 0, sizeof(buffer_UDR1));
 142:	98 2f       	mov	r25, r24
 144:	11 92       	st	Z+, r1
 146:	9a 95       	dec	r25
 148:	e9 f7       	brne	.-6      	; 0x144 <main+0x7c>
 14a:	fe 01       	movw	r30, r28
 14c:	11 92       	st	Z+, r1
			memset(buffer_Tx_USART0, 0, sizeof(buffer_Tx_USART0)); 
 14e:	8a 95       	dec	r24
 150:	e9 f7       	brne	.-6      	; 0x14c <main+0x84>
 152:	64 e0       	ldi	r22, 0x04	; 4
			USART0_Tx_size("\n\r",4);
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	f7 d0       	rcall	.+494    	; 0x34a <USART0_Tx_size>
 15c:	61 e0       	ldi	r22, 0x01	; 1
			pinToggle(&PORT_LED_RX_USART0, PIN_LED_RX_USART0);
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0d d1       	rcall	.+538    	; 0x37e <pinToggle>
 164:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <flag_stop_USART0>
			
		}
		
		if(flag_stop_USART0 == 1){
 168:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <flag_stop_USART0+0x1>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <main+0xaa>
 170:	bb cf       	rjmp	.-138    	; 0xe8 <main+0x20>
 172:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cnt_UDR0>
			if(cnt_UDR0 > 16)
 176:	81 31       	cpi	r24, 0x11	; 17
 178:	18 f0       	brcs	.+6      	; 0x180 <main+0xb8>
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cnt_UDR0>
			{
			cnt_UDR0 = 16;
 180:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <flag_stop_USART0+0x1>
			}
			
			flag_stop_USART0 = 0;
 184:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <flag_stop_USART0>
 188:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <flag_start_USART0+0x1>
			flag_start_USART0 = 0;
 18c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <flag_start_USART0>
 190:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <cnt_UDR0>
			USART1_Tx_size(buffer_UDR0, cnt_UDR0);
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	60 d0       	rcall	.+192    	; 0x25c <USART1_Tx_size>
 19c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cnt_UDR0>
			cnt_UDR0 = 0;
 1a0:	60 e0       	ldi	r22, 0x00	; 0
			pinToggle(&PORT_LED_RX_USART1, PIN_LED_RX_USART1);
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	eb d0       	rcall	.+470    	; 0x37e <pinToggle>
 1a8:	9f cf       	rjmp	.-194    	; 0xe8 <main+0x20>

000001aa <__vector_16>:
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
void pinToggle(volatile uint8_t *port, uint8_t pin){
	*port ^=  1 << pin;
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flag_start_USART1>
 1bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <flag_start_USART1+0x1>
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <__vector_16+0x2c>
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <flag_start_USART0>
 1da:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <flag_start_USART0+0x1>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <__vector_16+0x4a>
 1e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <contor_start_USART0>
 1e6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <contor_start_USART0+0x1>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <contor_start_USART0+0x1>
 1f0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <contor_start_USART0>
 1f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1fc:	89 2b       	or	r24, r25
 1fe:	61 f4       	brne	.+24     	; 0x218 <__vector_16+0x6e>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <flag_stop_USART1+0x1>
 208:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <flag_stop_USART1>
 20c:	8e e1       	ldi	r24, 0x1E	; 30
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 214:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 218:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <contor_start_USART0>
 21c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <contor_start_USART0+0x1>
 220:	89 2b       	or	r24, r25
 222:	61 f4       	brne	.+24     	; 0x23c <__vector_16+0x92>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <flag_stop_USART0+0x1>
 22c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <flag_stop_USART0>
 230:	84 e1       	ldi	r24, 0x14	; 20
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <contor_start_USART0+0x1>
 238:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <contor_start_USART0>
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <USART1_Tx_char>:
 24a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 24e:	85 ff       	sbrs	r24, 5
 250:	fc cf       	rjmp	.-8      	; 0x24a <USART1_Tx_char>
 252:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <data_UDR1>
 256:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 25a:	08 95       	ret

0000025c <USART1_Tx_size>:
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	8c 01       	movw	r16, r24
 26a:	7b 01       	movw	r14, r22
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	05 c0       	rjmp	.+10     	; 0x27c <USART1_Tx_size+0x20>
 272:	f8 01       	movw	r30, r16
 274:	81 91       	ld	r24, Z+
 276:	8f 01       	movw	r16, r30
 278:	e8 df       	rcall	.-48     	; 0x24a <USART1_Tx_char>
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	ce 15       	cp	r28, r14
 27e:	df 05       	cpc	r29, r15
 280:	c4 f3       	brlt	.-16     	; 0x272 <USART1_Tx_size+0x16>
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <__vector_30>:
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0b b6       	in	r0, 0x3b	; 59
 29c:	0f 92       	push	r0
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
 2aa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <cnt_UDR1>
 2ae:	e8 2f       	mov	r30, r24
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2b6:	ec 5c       	subi	r30, 0xCC	; 204
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	90 83       	st	Z, r25
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <flag_start_USART1+0x1>
 2c4:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <flag_start_USART1>
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <cnt_UDR1>
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0b be       	out	0x3b, r0	; 59
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_18>:
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
 302:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cnt_UDR0>
 306:	e8 2f       	mov	r30, r24
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	9c b1       	in	r25, 0x0c	; 12
 30c:	ea 5f       	subi	r30, 0xFA	; 250
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	90 83       	st	Z, r25
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <flag_start_USART0+0x1>
 31a:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <flag_start_USART0>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cnt_UDR0>
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0b be       	out	0x3b, r0	; 59
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <USART0_Tx_char>:
 33e:	5d 9b       	sbis	0x0b, 5	; 11
 340:	fe cf       	rjmp	.-4      	; 0x33e <USART0_Tx_char>
 342:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <data_UDR0>
 346:	8c b9       	out	0x0c, r24	; 12
 348:	08 95       	ret

0000034a <USART0_Tx_size>:
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	8c 01       	movw	r16, r24
 358:	7b 01       	movw	r14, r22
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	05 c0       	rjmp	.+10     	; 0x36a <USART0_Tx_size+0x20>
 360:	f8 01       	movw	r30, r16
 362:	81 91       	ld	r24, Z+
 364:	8f 01       	movw	r16, r30
 366:	eb df       	rcall	.-42     	; 0x33e <USART0_Tx_char>
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	ce 15       	cp	r28, r14
 36c:	df 05       	cpc	r29, r15
 36e:	c4 f3       	brlt	.-16     	; 0x360 <USART0_Tx_size+0x16>
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <pinToggle>:
 37e:	fc 01       	movw	r30, r24
 380:	40 81       	ld	r20, Z
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <pinToggle+0xe>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <pinToggle+0xa>
 390:	24 27       	eor	r18, r20
 392:	20 83       	st	Z, r18
 394:	08 95       	ret

00000396 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
 396:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 398:	90 81       	ld	r25, Z
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <pinReset+0xe>
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <pinReset+0xa>
 3a8:	20 95       	com	r18
 3aa:	29 23       	and	r18, r25
 3ac:	20 83       	st	Z, r18
 3ae:	08 95       	ret

000003b0 <TIMER0_INIT>:

#include "main_mcu_init.h"

void TIMER0_INIT(void){
	
	TCCR0 = 0x00;
 3b0:	13 be       	out	0x33, r1	; 51
	TCCR0 |= (0 << WGM01)|(0<<WGM00);
 3b2:	83 b7       	in	r24, 0x33	; 51
 3b4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS02)|(0 << CS01)|(0 << CS00);
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	83 bf       	out	0x33, r24	; 51

	OCR0 = 0x00;
 3bc:	11 be       	out	0x31, r1	; 49
	OCR0=0x7C;
 3be:	8c e7       	ldi	r24, 0x7C	; 124
 3c0:	81 bf       	out	0x31, r24	; 49
	
	TIMSK = 0x00;
 3c2:	17 be       	out	0x37, r1	; 55
	TIMSK |= (1 << TOIE0);
 3c4:	87 b7       	in	r24, 0x37	; 55
 3c6:	81 60       	ori	r24, 0x01	; 1
 3c8:	87 bf       	out	0x37, r24	; 55
 3ca:	08 95       	ret

000003cc <CONTOR_INIT>:
}

void CONTOR_INIT(void){
	contor_start_USART1 = timp_USART1;
 3cc:	8e e1       	ldi	r24, 0x1E	; 30
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 3d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	contor_start_USART0 = timp_USART0;
 3d8:	84 e1       	ldi	r24, 0x14	; 20
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <contor_start_USART0+0x1>
 3e0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <contor_start_USART0>
 3e4:	08 95       	ret

000003e6 <PORTURI_INIT>:
}


void PORTURI_INIT()
{
	DDRB  = 0xFF; // output
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	87 bb       	out	0x17, r24	; 23
	PORTB  = 0x00; // low
 3ea:	18 ba       	out	0x18, r1	; 24

	DDRC  = 0x7F;
 3ec:	9f e7       	ldi	r25, 0x7F	; 127
 3ee:	94 bb       	out	0x14, r25	; 20
	PORTC = 0x00;
 3f0:	15 ba       	out	0x15, r1	; 21

	DDRD  = 0xFF;
 3f2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 3f4:	12 ba       	out	0x12, r1	; 18
 3f6:	08 95       	ret

000003f8 <DEVICES_INIT>:
}

void DEVICES_INIT()
{
	cli();
 3f8:	f8 94       	cli

	PORTURI_INIT();
 3fa:	f5 df       	rcall	.-22     	; 0x3e6 <PORTURI_INIT>
	TIMER0_INIT();
 3fc:	d9 df       	rcall	.-78     	; 0x3b0 <TIMER0_INIT>
 3fe:	78 94       	sei
	
	sei();
 400:	08 95       	ret

00000402 <USART0_INIT>:
 402:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

void USART0_INIT(unsigned int ubrr)
{
	//set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
	UBRR0L = (unsigned char) ubrr;
 406:	89 b9       	out	0x09, r24	; 9
	
	//activ doar sa transmita si sa primeasca
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 408:	8a b1       	in	r24, 0x0a	; 10
 40a:	88 69       	ori	r24, 0x98	; 152
 40c:	8a b9       	out	0x0a, r24	; 10
	
	//setez frame format : 8 data , 1 bit stop
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 40e:	e5 e9       	ldi	r30, 0x95	; 149
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	86 60       	ori	r24, 0x06	; 6
 416:	80 83       	st	Z, r24
	
	//enable global interrupts
	set_sleep_mode(SLEEP_MODE_IDLE);
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	83 7e       	andi	r24, 0xE3	; 227
 41c:	85 bf       	out	0x35, r24	; 53
	sei();
 41e:	78 94       	sei
 420:	08 95       	ret

00000422 <USART1_INIT>:
}

void USART1_INIT(unsigned int ubrr)
{
	//set baud rate
	UBRR1H = (unsigned char) (ubrr>>8);
 422:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char) ubrr;
 426:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	//activ doar sa transmita si sa primeasca
	UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 42a:	ea e9       	ldi	r30, 0x9A	; 154
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	88 69       	ori	r24, 0x98	; 152
 432:	80 83       	st	Z, r24
	
	//setez frame format : 8 data , 1 bit stop
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
 434:	ed e9       	ldi	r30, 0x9D	; 157
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	86 60       	ori	r24, 0x06	; 6
 43c:	80 83       	st	Z, r24
	
	//enable global interrupts
	set_sleep_mode(SLEEP_MODE_IDLE);
 43e:	85 b7       	in	r24, 0x35	; 53
 440:	83 7e       	andi	r24, 0xE3	; 227
 442:	85 bf       	out	0x35, r24	; 53
	sei();
 444:	78 94       	sei
 446:	08 95       	ret

00000448 <memcpy>:
 448:	fb 01       	movw	r30, r22
 44a:	dc 01       	movw	r26, r24
 44c:	02 c0       	rjmp	.+4      	; 0x452 <memcpy+0xa>
 44e:	01 90       	ld	r0, Z+
 450:	0d 92       	st	X+, r0
 452:	41 50       	subi	r20, 0x01	; 1
 454:	50 40       	sbci	r21, 0x00	; 0
 456:	d8 f7       	brcc	.-10     	; 0x44e <memcpy+0x6>
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>
