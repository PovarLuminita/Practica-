
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010e  0080010e  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a9  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092b  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000723  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000650  00000000  00000000  00002d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000338b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  9e:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	*port ^=  1 << pin;
}

void pinSet(volatile uint8_t *port, uint8_t pin)
{
	*port |=  1 << pin;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <data>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <flag_rx>
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <initializare_porturi>:
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	15 b8       	out	0x05, r1	; 5
  d2:	9f e7       	ldi	r25, 0x7F	; 127
  d4:	97 b9       	out	0x07, r25	; 7
  d6:	18 b8       	out	0x08, r1	; 8
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	1b b8       	out	0x0b, r1	; 11
  dc:	08 95       	ret

000000de <initializare_devices>:
  de:	f8 94       	cli
  e0:	0e 94 66 00 	call	0xcc	; 0xcc <initializare_porturi>
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <USART_Initializare_registrii>:
  e8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f0:	a1 ec       	ldi	r26, 0xC1	; 193
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	1c 92       	st	X, r1
  f6:	e2 ec       	ldi	r30, 0xC2	; 194
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
  fc:	8c 91       	ld	r24, X
  fe:	88 69       	ori	r24, 0x98	; 152
 100:	8c 93       	st	X, r24
 102:	80 81       	ld	r24, Z
 104:	86 60       	ori	r24, 0x06	; 6
 106:	80 83       	st	Z, r24
 108:	83 b7       	in	r24, 0x33	; 51
 10a:	81 7f       	andi	r24, 0xF1	; 241
 10c:	83 bf       	out	0x33, r24	; 51
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <pinToggle>:
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <pinToggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <pinToggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <Receive_Buffer>:
 12a:	cf 93       	push	r28
 12c:	9c 01       	movw	r18, r24
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	10 c0       	rjmp	.+32     	; 0x152 <Receive_Buffer+0x28>
 132:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <flag_rx>
 136:	91 30       	cpi	r25, 0x01	; 1
 138:	61 f4       	brne	.+24     	; 0x152 <Receive_Buffer+0x28>
 13a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <data>
 13e:	f9 01       	movw	r30, r18
 140:	ec 0f       	add	r30, r28
 142:	f1 1d       	adc	r31, r1
 144:	80 83       	st	Z, r24
 146:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <flag_rx>
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	19 f0       	breq	.+6      	; 0x156 <Receive_Buffer+0x2c>
 150:	cf 5f       	subi	r28, 0xFF	; 255
 152:	c0 31       	cpi	r28, 0x10	; 16
 154:	70 f3       	brcs	.-36     	; 0x132 <Receive_Buffer+0x8>
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 89 00 	call	0x112	; 0x112 <pinToggle>
 160:	8c 2f       	mov	r24, r28
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin)
{
 166:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 168:	90 81       	ld	r25, Z
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <pinReset+0xe>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <pinReset+0xa>
 178:	20 95       	com	r18
 17a:	29 23       	and	r18, r25
 17c:	20 83       	st	Z, r18
 17e:	08 95       	ret

00000180 <main>:

///------------------------- COD ---------------------------------------------------------------------

int main(void)
{
	initialize();
 180:	0e 94 2b 01 	call	0x256	; 0x256 <initialize>
	initializare_devices();
 184:	0e 94 6f 00 	call	0xde	; 0xde <initializare_devices>
	USART_Initializare_registrii(MYUBRR);
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 74 00 	call	0xe8	; 0xe8 <USART_Initializare_registrii>
	
	
 	lcd_clear();
 190:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clear>
 	lcd_setCursor();
 194:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_setCursor>
 	lcd_print("TEST PROIECT");
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	87 ea       	ldi	r24, 0xA7	; 167
 1a4:	91 e6       	ldi	r25, 0x61	; 97
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x26>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x30>
 1b0:	00 00       	nop
 	_delay_ms(2000);
 	lcd_clear();
 1b2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clear>
 	lcd_setCursor();
 1b6:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_setCursor>
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	87 ea       	ldi	r24, 0xA7	; 167
 1be:	91 e6       	ldi	r25, 0x61	; 97
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x40>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x4a>
 1ca:	00 00       	nop
 	_delay_ms(2000);
	uint8_t a = 0 ;
// 	
	pinReset(&PORT_LED_328, PIN_LED_328);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 b3 00 	call	0x166	; 0x166 <pinReset>
	
	do
	{
		
		uint8_t a = Receive_Buffer(buffer);
 1d6:	8e e0       	ldi	r24, 0x0E	; 14
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 95 00 	call	0x12a	; 0x12a <Receive_Buffer>
		lcd_clear();
 1de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clear>
		lcd_setCursor();
 1e2:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_setCursor>
// 		sprintf(buffer_ch, "%d     ", a);
// 		lcd_print(buffer_ch);
		//_delay_ms(200);
		
		lcd_print(buffer);
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_print>
 1ee:	f3 cf       	rjmp	.-26     	; 0x1d6 <main+0x56>

000001f0 <lcd_command>:
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	9f 70       	andi	r25, 0x0F	; 15
 1f4:	28 2f       	mov	r18, r24
 1f6:	20 7f       	andi	r18, 0xF0	; 240
 1f8:	92 2b       	or	r25, r18
 1fa:	9b b9       	out	0x0b, r25	; 11
 1fc:	98 b1       	in	r25, 0x08	; 8
 1fe:	9d 7f       	andi	r25, 0xFD	; 253
 200:	98 b9       	out	0x08, r25	; 8
 202:	98 b1       	in	r25, 0x08	; 8
 204:	94 60       	ori	r25, 0x04	; 4
 206:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	35 e0       	ldi	r19, 0x05	; 5
 20a:	3a 95       	dec	r19
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_command+0x1a>
 20e:	00 00       	nop
 210:	98 b1       	in	r25, 0x08	; 8
 212:	9b 7f       	andi	r25, 0xFB	; 251
 214:	98 b9       	out	0x08, r25	; 8
 216:	ef e1       	ldi	r30, 0x1F	; 31
 218:	f3 e0       	ldi	r31, 0x03	; 3
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_command+0x2a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_command+0x30>
 220:	00 00       	nop
 222:	2b b1       	in	r18, 0x0b	; 11
 224:	f0 e1       	ldi	r31, 0x10	; 16
 226:	8f 9f       	mul	r24, r31
 228:	c0 01       	movw	r24, r0
 22a:	11 24       	eor	r1, r1
 22c:	92 2f       	mov	r25, r18
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	89 2b       	or	r24, r25
 232:	8b b9       	out	0x0b, r24	; 11
 234:	88 b1       	in	r24, 0x08	; 8
 236:	84 60       	ori	r24, 0x04	; 4
 238:	88 b9       	out	0x08, r24	; 8
 23a:	35 e0       	ldi	r19, 0x05	; 5
 23c:	3a 95       	dec	r19
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_command+0x4c>
 240:	00 00       	nop
 242:	88 b1       	in	r24, 0x08	; 8
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	88 b9       	out	0x08, r24	; 8
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_command+0x5c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_command+0x62>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <initialize>:
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	8f e5       	ldi	r24, 0x5F	; 95
 25c:	9a ee       	ldi	r25, 0xEA	; 234
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <initialize+0x8>
 262:	00 c0       	rjmp	.+0      	; 0x264 <initialize+0xe>
 264:	00 00       	nop
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	9e e4       	ldi	r25, 0x4E	; 78
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <initialize+0x1a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <initialize+0x20>
 276:	00 00       	nop
 278:	80 e3       	ldi	r24, 0x30	; 48
 27a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	87 e5       	ldi	r24, 0x57	; 87
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <initialize+0x2c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <initialize+0x32>
 288:	00 00       	nop
 28a:	80 e3       	ldi	r24, 0x30	; 48
 28c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	9f e1       	ldi	r25, 0x1F	; 31
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <initialize+0x56>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <initialize+0x5c>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <lcd_clear>:
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 2bc:	8f e3       	ldi	r24, 0x3F	; 63
 2be:	9f e1       	ldi	r25, 0x1F	; 31
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_clear+0xa>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_clear+0x10>
 2c6:	00 00       	nop
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
 2ce:	08 95       	ret

000002d0 <lcd_print>:
 2d0:	fc 01       	movw	r30, r24
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	3a c0       	rjmp	.+116    	; 0x34c <lcd_print+0x7c>
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	90 7f       	andi	r25, 0xF0	; 240
 2de:	98 2b       	or	r25, r24
 2e0:	9b b9       	out	0x0b, r25	; 11
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	88 b1       	in	r24, 0x08	; 8
 2ea:	84 60       	ori	r24, 0x04	; 4
 2ec:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_print+0x20>
 2f4:	00 00       	nop
 2f6:	8f e1       	ldi	r24, 0x1F	; 31
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_print+0x2a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_print+0x30>
 300:	00 00       	nop
 302:	88 b1       	in	r24, 0x08	; 8
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	88 b9       	out	0x08, r24	; 8
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	93 e0       	ldi	r25, 0x03	; 3
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_print+0x3c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_print+0x42>
 312:	00 00       	nop
 314:	4b b1       	in	r20, 0x0b	; 11
 316:	9c 91       	ld	r25, X
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	98 9f       	mul	r25, r24
 31c:	90 01       	movw	r18, r0
 31e:	11 24       	eor	r1, r1
 320:	94 2f       	mov	r25, r20
 322:	9f 70       	andi	r25, 0x0F	; 15
 324:	29 2b       	or	r18, r25
 326:	2b b9       	out	0x0b, r18	; 11
 328:	98 b1       	in	r25, 0x08	; 8
 32a:	94 60       	ori	r25, 0x04	; 4
 32c:	98 b9       	out	0x08, r25	; 8
 32e:	95 e0       	ldi	r25, 0x05	; 5
 330:	9a 95       	dec	r25
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_print+0x60>
 334:	00 00       	nop
 336:	98 b1       	in	r25, 0x08	; 8
 338:	9b 7f       	andi	r25, 0xFB	; 251
 33a:	98 b9       	out	0x08, r25	; 8
 33c:	8f e1       	ldi	r24, 0x1F	; 31
 33e:	93 e0       	ldi	r25, 0x03	; 3
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd_print+0x70>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_print+0x76>
 346:	00 00       	nop
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	df 01       	movw	r26, r30
 34e:	a6 0f       	add	r26, r22
 350:	b7 1f       	adc	r27, r23
 352:	9c 91       	ld	r25, X
 354:	91 11       	cpse	r25, r1
 356:	c0 cf       	rjmp	.-128    	; 0x2d8 <lcd_print+0x8>
 358:	08 95       	ret

0000035a <lcd_setCursor>:
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	89 ef       	ldi	r24, 0xF9	; 249
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <lcd_setCursor+0xc>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_setCursor+0x16>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
