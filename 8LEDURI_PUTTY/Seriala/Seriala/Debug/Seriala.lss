
Seriala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b0  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099d  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006db  00000000  00000000  00001ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000592  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000320a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	5b c0       	rjmp	.+182    	; 0x100 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 31       	cpi	r26, 0x13	; 19
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	dc d0       	rcall	.+440    	; 0x262 <main>
  aa:	36 c1       	rjmp	.+620    	; 0x318 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <port_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	18 ba       	out	0x18, r1	; 24
  b4:	9f e7       	ldi	r25, 0x7F	; 127
  b6:	94 bb       	out	0x14, r25	; 20
  b8:	15 ba       	out	0x15, r1	; 21
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	12 ba       	out	0x12, r1	; 18
  be:	08 95       	ret

000000c0 <init_devices>:
  c0:	f8 94       	cli
  c2:	f5 df       	rcall	.-22     	; 0xae <port_init>
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <USART_Init>:
  c8:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  cc:	89 b9       	out	0x09, r24	; 9
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	88 69       	ori	r24, 0x98	; 152
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	e5 e9       	ldi	r30, 0x95	; 149
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	80 83       	st	Z, r24
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	83 7e       	andi	r24, 0xE3	; 227
  e2:	85 bf       	out	0x35, r24	; 53
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <pinToggle>:
  e8:	fc 01       	movw	r30, r24
  ea:	40 81       	ld	r20, Z
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <pinToggle+0xe>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <pinToggle+0xa>
  fa:	24 27       	eor	r18, r20
  fc:	20 83       	st	Z, r18
  fe:	08 95       	ret

00000100 <__vector_18>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	2c b1       	in	r18, 0x0c	; 12
 130:	fc 01       	movw	r30, r24
 132:	ee 5f       	subi	r30, 0xFE	; 254
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	20 83       	st	Z, r18
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <flag_rx>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	cc df       	rcall	.-104    	; 0xe8 <pinToggle>
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0b be       	out	0x3b, r0	; 59
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <lcd_command>:
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	28 2f       	mov	r18, r24
 17c:	20 7f       	andi	r18, 0xF0	; 240
 17e:	92 2b       	or	r25, r18
 180:	9b bb       	out	0x1b, r25	; 27
 182:	95 b3       	in	r25, 0x15	; 21
 184:	9b 7f       	andi	r25, 0xFB	; 251
 186:	95 bb       	out	0x15, r25	; 21
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	92 60       	ori	r25, 0x02	; 2
 18c:	95 bb       	out	0x15, r25	; 21
 18e:	00 00       	nop
 190:	95 b3       	in	r25, 0x15	; 21
 192:	9d 7f       	andi	r25, 0xFD	; 253
 194:	95 bb       	out	0x15, r25	; 21
 196:	32 e4       	ldi	r19, 0x42	; 66
 198:	3a 95       	dec	r19
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_command+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_command+0x28>
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	30 e1       	ldi	r19, 0x10	; 16
 1a2:	83 9f       	mul	r24, r19
 1a4:	c0 01       	movw	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	92 2f       	mov	r25, r18
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	89 2b       	or	r24, r25
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	00 00       	nop
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	8d 7f       	andi	r24, 0xFD	; 253
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_command+0x4a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_command+0x50>
 1c6:	08 95       	ret

000001c8 <lcd_setCursor>:
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	d5 df       	rcall	.-86     	; 0x176 <lcd_command>
 1cc:	87 e8       	ldi	r24, 0x87	; 135
 1ce:	93 e1       	ldi	r25, 0x13	; 19
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_setCursor+0x8>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_setCursor+0xe>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <lcd_clear>:
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	cc df       	rcall	.-104    	; 0x176 <lcd_command>
 1de:	83 ef       	ldi	r24, 0xF3	; 243
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_clear+0x8>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_clear+0xe>
 1e8:	00 00       	nop
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	c4 cf       	rjmp	.-120    	; 0x176 <lcd_command>
 1ee:	08 95       	ret

000001f0 <lcd_print>:
}



void lcd_print (char *str, int size)
{
 1f0:	fc 01       	movw	r30, r24
	char data;
	int i;
	
	for(i=0; i < size-1 ; i++)
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	2f c0       	rjmp	.+94     	; 0x256 <lcd_print+0x66>
	{
		data = str[i];
 1f8:	df 01       	movw	r26, r30
 1fa:	a4 0f       	add	r26, r20
 1fc:	b5 1f       	adc	r27, r21
 1fe:	2c 91       	ld	r18, X
		PORTA = (PORTA & 0x0F) | (data & 0xF0); //11110000 ... 10101010
 200:	8b b3       	in	r24, 0x1b	; 27
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	92 2f       	mov	r25, r18
 206:	90 7f       	andi	r25, 0xF0	; 240
 208:	89 2b       	or	r24, r25
 20a:	8b bb       	out	0x1b, r24	; 27
		PORTC |= (1<<2);
 20c:	85 b3       	in	r24, 0x15	; 21
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	85 bb       	out	0x15, r24	; 21
		PORTC |= (1<<1);
 212:	85 b3       	in	r24, 0x15	; 21
 214:	82 60       	ori	r24, 0x02	; 2
 216:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	00 00       	nop
		_delay_us(1);
		/*_delay_us(200);*/
		PORTC &= ~ (1<<1);
 21a:	95 b3       	in	r25, 0x15	; 21
 21c:	9d 7f       	andi	r25, 0xFD	; 253
 21e:	95 bb       	out	0x15, r25	; 21
 220:	82 e4       	ldi	r24, 0x42	; 66
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_print+0x32>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_print+0x38>
		_delay_us(200);
		PORTA = (PORTA & 0x0F) | (data << 4);
 228:	9b b3       	in	r25, 0x1b	; 27
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	28 9f       	mul	r18, r24
 22e:	90 01       	movw	r18, r0
 230:	11 24       	eor	r1, r1
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	29 2b       	or	r18, r25
 236:	2b bb       	out	0x1b, r18	; 27
		PORTC |= (1<<1);
 238:	95 b3       	in	r25, 0x15	; 21
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	95 bb       	out	0x15, r25	; 21
 23e:	00 00       	nop
		_delay_us(1);
		PORTC &= ~ (1<<1);
 240:	95 b3       	in	r25, 0x15	; 21
 242:	9d 7f       	andi	r25, 0xFD	; 253
 244:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	89 ef       	ldi	r24, 0xF9	; 249
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_print+0x5a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_print+0x60>
 250:	00 00       	nop
void lcd_print (char *str, int size)
{
	char data;
	int i;
	
	for(i=0; i < size-1 ; i++)
 252:	4f 5f       	subi	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255
 256:	cb 01       	movw	r24, r22
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	48 17       	cp	r20, r24
 25c:	59 07       	cpc	r21, r25
 25e:	64 f2       	brlt	.-104    	; 0x1f8 <lcd_print+0x8>
		PORTC |= (1<<1);
		_delay_us(1);
		PORTC &= ~ (1<<1);
		_delay_ms(1);
	}
}
 260:	08 95       	ret

00000262 <main>:
	PORTD = 0x00;
}


int main(void){
	init_devices();
 262:	2e df       	rcall	.-420    	; 0xc0 <init_devices>
	USART_Init(MYUBRR);
 264:	87 e6       	ldi	r24, 0x67	; 103
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	2f df       	rcall	.-418    	; 0xc8 <USART_Init>
	
	
	do{
	if(flag_rx == 1)
 26a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <flag_rx>
 26e:	81 30       	cpi	r24, 0x01	; 1
	{
	lcd_clear();
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x8>
 272:	b3 df       	rcall	.-154    	; 0x1da <lcd_clear>
	lcd_setCursor();	
 274:	a9 df       	rcall	.-174    	; 0x1c8 <lcd_setCursor>
 276:	60 e1       	ldi	r22, 0x10	; 16
	lcd_print(buffer,16);
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	b8 df       	rcall	.-144    	; 0x1f0 <lcd_print>
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buffer>
	//USART_Transmit_string(buffer);
	//METODA SWITCH/CASE
	
	
	if(buffer[0] == 0){
 284:	81 11       	cpse	r24, r1
 286:	04 c0       	rjmp	.+8      	; 0x290 <main+0x2e>
 288:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<<0);
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	3a c0       	rjmp	.+116    	; 0x304 <main+0xa2>
		break;
 290:	81 30       	cpi	r24, 0x01	; 1
	}
	
	if(buffer[0] == 1){
 292:	21 f4       	brne	.+8      	; 0x29c <main+0x3a>
 294:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 1);
 296:	82 60       	ori	r24, 0x02	; 2
 298:	88 bb       	out	0x18, r24	; 24
 29a:	34 c0       	rjmp	.+104    	; 0x304 <main+0xa2>
		break;
 29c:	82 30       	cpi	r24, 0x02	; 2
	}
	
	
	if(buffer[0] == 2){
 29e:	21 f4       	brne	.+8      	; 0x2a8 <main+0x46>
 2a0:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 2);
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	2e c0       	rjmp	.+92     	; 0x304 <main+0xa2>
		break;
 2a8:	83 30       	cpi	r24, 0x03	; 3
	}
	
	if(buffer[0] == 3){
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <main+0x52>
 2ac:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 3);
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	88 bb       	out	0x18, r24	; 24
 2b2:	28 c0       	rjmp	.+80     	; 0x304 <main+0xa2>
		break;
 2b4:	84 30       	cpi	r24, 0x04	; 4
	}
	
	if(buffer[0] == 4){
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <main+0x5e>
 2b8:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 4);
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	22 c0       	rjmp	.+68     	; 0x304 <main+0xa2>
		break;
 2c0:	85 30       	cpi	r24, 0x05	; 5
	}
	
	if(buffer[0] == 5){
 2c2:	21 f4       	brne	.+8      	; 0x2cc <main+0x6a>
 2c4:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 5);
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	1c c0       	rjmp	.+56     	; 0x304 <main+0xa2>
		break;
 2cc:	86 30       	cpi	r24, 0x06	; 6
	}
	
	
	if(buffer[0] == 6){
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <main+0x76>
 2d0:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 6);
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	88 bb       	out	0x18, r24	; 24
 2d6:	16 c0       	rjmp	.+44     	; 0x304 <main+0xa2>
		break;
 2d8:	87 30       	cpi	r24, 0x07	; 7
	}
	
	if(buffer[0] == 7){
 2da:	21 f4       	brne	.+8      	; 0x2e4 <main+0x82>
 2dc:	88 b3       	in	r24, 0x18	; 24
		PORTB |= (1<< 7);
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	10 c0       	rjmp	.+32     	; 0x304 <main+0xa2>
		break;
 2e4:	88 30       	cpi	r24, 0x08	; 8
	}
	
	
	if(buffer[0] == 8){
 2e6:	11 f4       	brne	.+4      	; 0x2ec <main+0x8a>
 2e8:	18 ba       	out	0x18, r1	; 24
		PORTB = 0x00;
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <main+0xa2>
		break;
 2ec:	89 30       	cpi	r24, 0x09	; 9
	}
	
	if(buffer[0] == 9){
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <main+0x94>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
		PORTB = 0xFF;
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <main+0xa2>
		break;
 2f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	}
	
	
	 cnt = 0;
 2fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <flag_rx>
	 flag_rx = 0;
 302:	b3 cf       	rjmp	.-154    	; 0x26a <main+0x8>
 304:	85 b7       	in	r24, 0x35	; 53

}}while(1);
	
	
	sleep_mode();
 306:	80 62       	ori	r24, 0x20	; 32
 308:	85 bf       	out	0x35, r24	; 53
 30a:	88 95       	sleep
 30c:	85 b7       	in	r24, 0x35	; 53
 30e:	8f 7d       	andi	r24, 0xDF	; 223
 310:	85 bf       	out	0x35, r24	; 53
 312:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
