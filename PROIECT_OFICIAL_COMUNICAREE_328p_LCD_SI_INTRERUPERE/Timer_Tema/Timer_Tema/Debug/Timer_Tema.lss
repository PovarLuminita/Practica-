
Timer_Tema.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010c  0080010c  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f36  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000871  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000660  00000000  00000000  00001cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000565  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  9e:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	*port ^=  1 << pin;
}

void pinSet(volatile uint8_t *port, uint8_t pin)
{
	*port |=  1 << pin;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  b8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <inc_ch>
  bc:	e8 2f       	mov	r30, r24
  be:	08 2e       	mov	r0, r24
  c0:	00 0c       	add	r0, r0
  c2:	ff 0b       	sbc	r31, r31
  c4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	e4 5f       	subi	r30, 0xF4	; 244
  ca:	fe 4f       	sbci	r31, 0xFE	; 254
  cc:	90 83       	st	Z, r25
  ce:	91 11       	cpse	r25, r1
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <__vector_18+0x32>
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <flag_rx>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <inc_ch>
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <USART_Transmit_caracter>:
  f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f4:	95 ff       	sbrs	r25, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <USART_Transmit_caracter>
  f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fc:	08 95       	ret

000000fe <USART_Transmit_sir>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
 104:	03 c0       	rjmp	.+6      	; 0x10c <USART_Transmit_sir+0xe>
 106:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_Transmit_caracter>
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	88 81       	ld	r24, Y
 10e:	81 11       	cpse	r24, r1
 110:	fa cf       	rjmp	.-12     	; 0x106 <USART_Transmit_sir+0x8>
 112:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_Transmit_caracter>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <initializare_porturi>:
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 b9       	out	0x04, r24	; 4
 120:	15 b8       	out	0x05, r1	; 5
 122:	9f e7       	ldi	r25, 0x7F	; 127
 124:	97 b9       	out	0x07, r25	; 7
 126:	18 b8       	out	0x08, r1	; 8
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	1b b8       	out	0x0b, r1	; 11
 12c:	08 95       	ret

0000012e <initializare_devices>:
 12e:	f8 94       	cli
 130:	0e 94 8e 00 	call	0x11c	; 0x11c <initializare_porturi>
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <USART_Initializare_registrii>:
 138:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 140:	a1 ec       	ldi	r26, 0xC1	; 193
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	1c 92       	st	X, r1
 146:	e2 ec       	ldi	r30, 0xC2	; 194
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
 14c:	8c 91       	ld	r24, X
 14e:	88 69       	ori	r24, 0x98	; 152
 150:	8c 93       	st	X, r24
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	81 7f       	andi	r24, 0xF1	; 241
 15c:	83 bf       	out	0x33, r24	; 51
 15e:	78 94       	sei
 160:	08 95       	ret

00000162 <pinToggle>:
 162:	fc 01       	movw	r30, r24
 164:	40 81       	ld	r20, Z
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <pinToggle+0xe>
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <pinToggle+0xa>
 174:	24 27       	eor	r18, r20
 176:	20 83       	st	Z, r18
 178:	08 95       	ret

0000017a <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin)
{
 17a:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 17c:	90 81       	ld	r25, Z
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <pinReset+0xe>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <pinReset+0xa>
 18c:	20 95       	com	r18
 18e:	29 23       	and	r18, r25
 190:	20 83       	st	Z, r18
 192:	08 95       	ret

00000194 <main>:

///------------------------- COD ---------------------------------------------------------------------

int main(void)
{
	initialize();
 194:	0e 94 28 01 	call	0x250	; 0x250 <initialize>
	initializare_devices();
 198:	0e 94 97 00 	call	0x12e	; 0x12e <initializare_devices>
	USART_Initializare_registrii(MYUBRR);
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Initializare_registrii>
	
	
 	lcd_clear();
 1a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_clear>
 	lcd_setCursor();
 1a8:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_setCursor>
	pinReset(&PORT_LED_328, PIN_LED_328);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	85 e2       	ldi	r24, 0x25	; 37
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 bd 00 	call	0x17a	; 0x17a <pinReset>
	
	do
	{
	 if(flag_rx == 1)	{
 1b6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <flag_rx>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x22>
		 lcd_clear();
 1be:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_clear>
		 lcd_setCursor();
 1c2:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_setCursor>
		  lcd_print(buffer);
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_print>
		  //USART_Transmit_caracter('a');
		  USART_Transmit_sir("am primit \n");
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_Transmit_sir>
		  pinToggle(&PORT_LED_328, PIN_LED_328);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 b1 00 	call	0x162	; 0x162 <pinToggle>
		  inc_ch = 0; 
 1e0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <inc_ch>
		  flag_rx = 0;
 1e4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <flag_rx>
 1e8:	e6 cf       	rjmp	.-52     	; 0x1b6 <main+0x22>

000001ea <lcd_command>:
 1ea:	9b b1       	in	r25, 0x0b	; 11
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	28 2f       	mov	r18, r24
 1f0:	20 7f       	andi	r18, 0xF0	; 240
 1f2:	92 2b       	or	r25, r18
 1f4:	9b b9       	out	0x0b, r25	; 11
 1f6:	98 b1       	in	r25, 0x08	; 8
 1f8:	9d 7f       	andi	r25, 0xFD	; 253
 1fa:	98 b9       	out	0x08, r25	; 8
 1fc:	98 b1       	in	r25, 0x08	; 8
 1fe:	94 60       	ori	r25, 0x04	; 4
 200:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	35 e0       	ldi	r19, 0x05	; 5
 204:	3a 95       	dec	r19
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_command+0x1a>
 208:	00 00       	nop
 20a:	98 b1       	in	r25, 0x08	; 8
 20c:	9b 7f       	andi	r25, 0xFB	; 251
 20e:	98 b9       	out	0x08, r25	; 8
 210:	ef e1       	ldi	r30, 0x1F	; 31
 212:	f3 e0       	ldi	r31, 0x03	; 3
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_command+0x2a>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_command+0x30>
 21a:	00 00       	nop
 21c:	2b b1       	in	r18, 0x0b	; 11
 21e:	f0 e1       	ldi	r31, 0x10	; 16
 220:	8f 9f       	mul	r24, r31
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	92 2f       	mov	r25, r18
 228:	9f 70       	andi	r25, 0x0F	; 15
 22a:	89 2b       	or	r24, r25
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	84 60       	ori	r24, 0x04	; 4
 232:	88 b9       	out	0x08, r24	; 8
 234:	35 e0       	ldi	r19, 0x05	; 5
 236:	3a 95       	dec	r19
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_command+0x4c>
 23a:	00 00       	nop
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	88 b9       	out	0x08, r24	; 8
 242:	8f e1       	ldi	r24, 0x1F	; 31
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_command+0x5c>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_command+0x62>
 24c:	00 00       	nop
 24e:	08 95       	ret

00000250 <initialize>:
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	8f e5       	ldi	r24, 0x5F	; 95
 256:	9a ee       	ldi	r25, 0xEA	; 234
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <initialize+0x8>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <initialize+0xe>
 25e:	00 00       	nop
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <initialize+0x1a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <initialize+0x20>
 270:	00 00       	nop
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	87 e5       	ldi	r24, 0x57	; 87
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <initialize+0x2c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <initialize+0x32>
 282:	00 00       	nop
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	9f e1       	ldi	r25, 0x1F	; 31
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <initialize+0x56>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <initialize+0x5c>
 2ac:	00 00       	nop
 2ae:	08 95       	ret

000002b0 <lcd_clear>:
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9f e1       	ldi	r25, 0x1F	; 31
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_clear+0xa>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_clear+0x10>
 2c0:	00 00       	nop
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
 2c8:	08 95       	ret

000002ca <lcd_print>:
 2ca:	fc 01       	movw	r30, r24
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	3a c0       	rjmp	.+116    	; 0x346 <lcd_print+0x7c>
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	98 2b       	or	r25, r24
 2da:	9b b9       	out	0x0b, r25	; 11
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	88 b9       	out	0x08, r24	; 8
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_print+0x20>
 2ee:	00 00       	nop
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	93 e0       	ldi	r25, 0x03	; 3
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_print+0x2a>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_print+0x30>
 2fa:	00 00       	nop
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	88 b9       	out	0x08, r24	; 8
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_print+0x3c>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_print+0x42>
 30c:	00 00       	nop
 30e:	4b b1       	in	r20, 0x0b	; 11
 310:	9c 91       	ld	r25, X
 312:	80 e1       	ldi	r24, 0x10	; 16
 314:	98 9f       	mul	r25, r24
 316:	90 01       	movw	r18, r0
 318:	11 24       	eor	r1, r1
 31a:	94 2f       	mov	r25, r20
 31c:	9f 70       	andi	r25, 0x0F	; 15
 31e:	29 2b       	or	r18, r25
 320:	2b b9       	out	0x0b, r18	; 11
 322:	98 b1       	in	r25, 0x08	; 8
 324:	94 60       	ori	r25, 0x04	; 4
 326:	98 b9       	out	0x08, r25	; 8
 328:	95 e0       	ldi	r25, 0x05	; 5
 32a:	9a 95       	dec	r25
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_print+0x60>
 32e:	00 00       	nop
 330:	98 b1       	in	r25, 0x08	; 8
 332:	9b 7f       	andi	r25, 0xFB	; 251
 334:	98 b9       	out	0x08, r25	; 8
 336:	8f e1       	ldi	r24, 0x1F	; 31
 338:	93 e0       	ldi	r25, 0x03	; 3
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_print+0x70>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <lcd_print+0x76>
 340:	00 00       	nop
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	df 01       	movw	r26, r30
 348:	a6 0f       	add	r26, r22
 34a:	b7 1f       	adc	r27, r23
 34c:	9c 91       	ld	r25, X
 34e:	91 11       	cpse	r25, r1
 350:	c0 cf       	rjmp	.-128    	; 0x2d2 <lcd_print+0x8>
 352:	08 95       	ret

00000354 <lcd_setCursor>:
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	89 ef       	ldi	r24, 0xF9	; 249
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <lcd_setCursor+0xc>
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_setCursor+0x16>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
